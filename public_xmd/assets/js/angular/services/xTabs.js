// Generated by CoffeeScript 1.10.0
angular.module("ximdex.common.service").factory("xTabs", [
  "$window", "$timeout", "$http", "xUrlHelper", "$rootScope", "$compile", "angularLoad", function($window, $timeout, $http, xUrlHelper, $rootScope, $compile, angularLoad) {
    var activeIndex, bindFormEvents, postLoadCssAndJs, postLoadJs, scopeWelcomeTab, tabs, triggerUpdateTabsPosition, visitedTabs, xtab;
    scopeWelcomeTab = null;
    tabs = [];
    visitedTabs = [];
    activeIndex = -1;
    xtab = {};
    bindFormEvents = function(tab) {
      var form, forms, gobackButton, i, j, len;
      forms = angular.element("form", "#" + tab.id + "_content");
      if (forms.length === 0) {
        new X.FormsManager({
          actionView: {
            action: tab.action
          },
          tabId: tab.id,
          actionContainer: angular.element("#" + tab.id + "_content")
        });
      } else {
        for (i = j = 0, len = forms.length; j < len; i = ++j) {
          form = forms[i];
          new X.FormsManager({
            actionView: {
              action: tab.action
            },
            tabId: tab.id,
            actionContainer: angular.element("#" + tab.id + "_content"),
            form: angular.element(form)
          });
        }
      }
      gobackButton = angular.element('fieldset.buttons-form .goback-button', "#" + tab.id + "_content");
      gobackButton.bind("click", function() {
        tab.history.pop();
        tab.url = tab.history[tab.history.length - 1];
        return xtab.reloadTabById(tab.id);
      });
    };
    xtab.getTabIndex = function(tabId) {
      var i, j, len, tab;
      for (i = j = 0, len = tabs.length; j < len; i = ++j) {
        tab = tabs[i];
        if (tab.id === tabId) {
          return i;
        }
      }
      return -1;
    };
    xtab.submitForm = function(args) {
      $http({
        url: args.url,
        responseType: args.reload ? "" : "json",
        method: "POST",
        data: args.data,
        headers: {
          "Content-Type": "application/x-www-form-urlencoded"
        }
      }).success(function(data) {
        var index;
        if (data) {
          index = xtab.getTabIndex(args.tabId);
          if (index < 0) {
            return;
          }
          tabs[index].history.push(args.url);
          tabs[index].url = args.url;
          if (args.reload === true) {
            tabs[index].content = data;
            xtab.loadCssAndJs(tabs[index]);
          }
          if (args.callback) {
            args.callback({
              data: data,
              tab: tabs[index]
            });
          }
        }
      }).error(function(error) {
        if (args.callback) {
          args.callback({
            error: true
          });
        }
      });
    };
    postLoadJs = function(tab, nodeids) {
      var compiled, container, scope;
      container = angular.element("#" + tab.id + "_content");
      if (tab.id !== "10000_welcome") {
        scope = container.scope();
      } else {
        if (scopeWelcomeTab != null) {
          scopeWelcomeTab.$destroy();
        }
        scope = container.scope().$new();
      }
      compiled = $compile(tab.content)(scope);
      if (tab.id === "10000_welcome") {
        scopeWelcomeTab = scope;
      }
      container.html(compiled);
      bindFormEvents(tab);
      return $window.com.ximdex.triggerActionLoaded({
        title: "#" + tab.id + "_tab",
        context: "#" + tab.id + "_content",
        url: tab.url,
        action: tab.action,
        nodes: nodeids,
        tab: tab
      });
    };
    postLoadCssAndJs = function(tab) {
      var callback, cont, content, css, cssArr, j, js, jsArr, k, l, len, len1, len2, n, nodeids, ref, results;
      cssArr = [];
      content = angular.element(tab.content);
      content.first().children().each(function(index, item) {
        cssArr.push(angular.element(item).html());
      });
      for (j = 0, len = cssArr.length; j < len; j++) {
        css = cssArr[j];
        angularLoad.loadCSS(css);
      }
      jsArr = [];
      content.first().next().children().each(function(index, item) {
        jsArr.push(angular.element(item).html());
      });
      nodeids = [];
      ref = tab.nodes;
      for (k = 0, len1 = ref.length; k < len1; k++) {
        n = ref[k];
        nodeids.push(n.nodeid);
      }
      cont = 0;
      callback = function() {
        if (++cont === jsArr.length) {
          postLoadJs(tab, nodeids);
        }
      };
      if (jsArr.length > 0) {
        results = [];
        for (l = 0, len2 = jsArr.length; l < len2; l++) {
          js = jsArr[l];
          results.push(angularLoad.loadScript(js).then(function() {
            callback();
          })["catch"](function() {
            console.log("Error loading JS");
          }));
        }
        return results;
      } else {
        return postLoadJs(tab, nodeids);
      }
    };
    xtab.loadCssAndJs = function(tab) {
      $timeout(function() {
        return postLoadCssAndJs(tab);
      }, 0);
    };
    xtab.pushTab = function(action, node) {
      var i, j, k, len, len1, n, newid, params, tab, url;
      if (node.constructor === Array) {
        for (j = 0, len = node.length; j < len; j++) {
          n = node[j];
          xtab.pushTab(action, n);
        }
        return;
      }
      if (action.params != null) {
        params = action.params;
      } else {
        params = '';
      }
      newid = node.nodeid + "_" + action.command;
      if (typeof params === 'string' || params instanceof String) {
    	  
    	//params = params.replace("=", "_");
        params = params.replace(/=/g, "_");
        params = params.replace(/&/g, "_");
        
        newid += "_" + params;
      } else {
        angular.element.each(params[0], function(key, value) {
          return newid += "_" + key + '_' + value;
        });
      }
      for (i = k = 0, len1 = tabs.length; k < len1; i = ++k) {
        tab = tabs[i];
        if (tab.id === newid) {
          xtab.setActiveTab(i);
          xtab.highlightTab(i);
          return;
        }
      }
      url = xUrlHelper.getAction({
        actionid: action.id,
        action: action.command,
        nodes: [node],
        module: action.module,
        method: action.method,
        options: action.params
      });
      
      $http.get(url).success(function(data) {
        var newlength, newtab;
        if (data) {
          newtab = {
            id: newid,
            actionid: action.id,
            name: action.name,
            content: data,
            nodes: [node],
            action: action,
            command: action.command,
            blink: false,
            show: true,
            url: url,
            history: [url]
          };
          xtab.loadCssAndJs(newtab);
          newlength = tabs.push(newtab);

          /*$timeout(
              () ->
                  $rootScope.$broadcast('updateTabsPosition')
          ,
              0
          )
           */
          xtab.setActiveTab(newlength - 1);
        }
      });
    };
    xtab.getTabs = function() {
      return tabs;
    };
    xtab.activeIndex = function() {
      return activeIndex;
    };
    triggerUpdateTabsPosition = function(deletedTab) {
      if (deletedTab != null) {
        return $rootScope.$broadcast('updateTabsPosition', deletedTab);
      } else {
        return $rootScope.$broadcast('updateTabsPosition');
      }
    };
    xtab.removeTab = function(index) {
      var deletedTab, i, j, len, tab, visitedIndex;
      visitedIndex = visitedTabs.indexOf(index);
      if (visitedIndex >= 0) {
        visitedTabs.splice(visitedIndex, 1);
        for (i = j = 0, len = visitedTabs.length; j < len; i = ++j) {
          tab = visitedTabs[i];
          if (visitedTabs[i] > index) {
            visitedTabs[i] = visitedTabs[i] - 1;
          }
        }
      }
      deletedTab = (tabs.splice(index, 1))[0];
      $rootScope.$broadcast('nodemodified');
      if (visitedTabs.length > 0) {
        activeIndex = visitedTabs[0];
        $timeout(function() {
          return triggerUpdateTabsPosition(deletedTab);
        }, 0);
      } else {
        activeIndex = -1;
      }

      /*$timeout(
          () ->
              $rootScope.$broadcast('updateTabsPosition')
      ,
          400
      )
       */
    };
    xtab.setActiveTab = function(index) {
      var visitedIndex;
      activeIndex = index;
      visitedIndex = visitedTabs.indexOf(index);
      if (visitedIndex >= 0) {
        visitedTabs.splice(visitedIndex, 1);
      }
      visitedTabs.unshift(index);
      $timeout(triggerUpdateTabsPosition, 0);
    };
    xtab.highlightTab = function(index) {
      if (tabs[index].blink === true) {
        return;
      }
      tabs[index].blink = true;
      return $timeout(function() {
    	if (tabs[index]) {
    		return tabs[index].blink = false;
    	}
    	return false;
      }, 2000);
    };
    xtab.closeAllTabs = function() {
      tabs.splice(0, tabs.length);
      activeIndex = -1;
      visitedTabs = [];
      $timeout(triggerUpdateTabsPosition, 400);
    };
    xtab.offAllTabs = function() {
      activeIndex = -1;
    };
    xtab.removeTabById = function(tabId) {
      var index;
      index = xtab.getTabIndex(tabId);
      if (index >= 0) {
        return xtab.removeTab(index);
      }
    };
    xtab.reloadTab = function(index) {
      var tab, url;
      tab = tabs[index];
      url = xUrlHelper.getAction({
        actionid: tab.action.id,
        action: tab.action.command,
        nodes: tab.nodes,
        module: tab.action.module,
        method: tab.action.method,
        options: [
          {
            actionReload: true
          }
        ]
      });
      $http.get(url).success(function(data) {
        if (data) {
          tab.content = data;
          xtab.loadCssAndJs(tab);
        }
      });
    };
    xtab.reloadTabById = function(tabId) {
      var index;
      index = xtab.getTabIndex(tabId);
      if (index >= 0) {
        xtab.reloadTab(index);
      }
    };
    xtab.setTabNode = function(tabId, nodes) {
      var index;
      index = xtab.getTabIndex(tabId);
      if (index >= 0) {
        tabs[index].nodes = nodes;
      }
    };
    xtab.setActiveTabById = function(tabId) {
      var index;
      index = xtab.getTabIndex(tabId);
      if (index >= 0) {
        xtab.setActiveTab(index);
      }
    };
    xtab.getActiveTab = function() {
      if (activeIndex >= 0) {
        return tabs[activeIndex];
      }
      return null;
    };
    xtab.openAction = function(action, nodes) {
      var j, len, n, newNode, nodesArray;
      nodesArray = [];
      if (Array.isArray(nodes)) {
        for (j = 0, len = nodes.length; j < len; j++) {
          n = nodes[j];
          newNode = {
            nodeid: n
          };
          nodesArray.push(newNode);
        }
      } else if (nodes) {
        nodesArray.push({
          nodeid: nodes
        });
      }
      xtab.pushTab(action, nodesArray);
    };
    return xtab;
  }
]);
