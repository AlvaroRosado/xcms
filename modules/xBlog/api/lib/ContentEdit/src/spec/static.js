// Generated by CoffeeScript 1.10.0
describe('`ContentEdit.Static()`', function() {
  return it('should return an instance of Static`', function() {
    var staticElm;
    staticElm = new ContentEdit.Static('div', {}, '<div></div>');
    return expect(staticElm instanceof ContentEdit.Static).toBe(true);
  });
});

describe('`ContentEdit.Static.cssTypeName()`', function() {
  return it('should return \'static\'', function() {
    var staticElm;
    staticElm = new ContentEdit.Static('div', {}, '<div></div>');
    return expect(staticElm.cssTypeName()).toBe('static');
  });
});

describe('`ContentEdit.Static.createDraggingDOMElement()`', function() {
  return it('should create a helper DOM element', function() {
    var helper, region, staticElm;
    staticElm = new ContentEdit.Static('div', {}, 'foo <b>bar</b>');
    region = new ContentEdit.Region(document.createElement('div'));
    region.attach(staticElm);
    helper = staticElm.createDraggingDOMElement();
    expect(helper).not.toBe(null);
    expect(helper.tagName.toLowerCase()).toBe('div');
    return expect(helper.innerHTML).toBe('foo bar');
  });
});

describe('`ContentEdit.Static.type()`', function() {
  return it('should return \'Static\'', function() {
    var staticElm;
    staticElm = new ContentEdit.Static('div', {}, '<div></div>');
    return expect(staticElm.type()).toBe('Static');
  });
});

describe('`ContentEdit.Static.typeName()`', function() {
  return it('should return \'Static\'', function() {
    var staticElm;
    staticElm = new ContentEdit.Static('div', {}, '<div></div>');
    return expect(staticElm.typeName()).toBe('Static');
  });
});

describe('ContentEdit.Static.html()', function() {
  return it('should return a HTML string for the static element', function() {
    var staticElm;
    staticElm = new ContentEdit.Static('div', {
      'class': 'foo'
    }, '<div><b>foo</b></div>');
    return expect(staticElm.html()).toBe('<div class="foo"><div><b>foo</b></div></div>');
  });
});

describe('ContentEdit.Static.mount()', function() {
  var region, staticElm;
  region = null;
  staticElm = null;
  beforeEach(function() {
    staticElm = new ContentEdit.Static('div', {
      'class': 'foo'
    }, '<div><b>foo</b></div>');
    region = new ContentEdit.Region(document.createElement('div'));
    region.attach(staticElm);
    return staticElm.unmount();
  });
  it('should mount the static element to the DOM', function() {
    staticElm.mount();
    expect(staticElm.isMounted()).toBe(true);
    return expect(staticElm.domElement().innerHTML).toBe('<div><b>foo</b></div>');
  });
  return it('should trigger the `mount` event against the root', function() {
    var foo, root;
    foo = {
      handleFoo: function() {}
    };
    spyOn(foo, 'handleFoo');
    root = ContentEdit.Root.get();
    root.bind('mount', foo.handleFoo);
    staticElm.mount();
    return expect(foo.handleFoo).toHaveBeenCalledWith(staticElm);
  });
});

describe('`ContentEdit.Static.fromDOMElement()`', function() {
  return it('should convert a DOM element into an static element', function() {
    var domElement, region, staticElm;
    region = new ContentEdit.Region(document.createElement('div'));
    domElement = document.createElement('div');
    domElement.innerHTML = '<div><b>foo</b></div>';
    staticElm = ContentEdit.Static.fromDOMElement(domElement);
    region.attach(staticElm);
    return expect(staticElm.domElement().innerHTML).toBe('<div><b>foo</b></div>');
  });
});

describe('`ContentEdit.Static` drop interactions if `data-ce-moveable` is set', function() {
  var region, staticElm;
  staticElm = null;
  region = null;
  beforeEach(function() {
    region = new ContentEdit.Region(document.createElement('div'));
    staticElm = new ContentEdit.Static('div', {
      'data-ce-moveable': ''
    }, 'foo');
    return region.attach(staticElm);
  });
  return it('should support dropping on Text', function() {
    var otherStaticElm;
    otherStaticElm = new ContentEdit.Static('div', {
      'data-ce-moveable': ''
    }, 'bar');
    region.attach(otherStaticElm);
    expect(staticElm.nextSibling()).toBe(otherStaticElm);
    staticElm.drop(otherStaticElm, ['below', 'center']);
    expect(otherStaticElm.nextSibling()).toBe(staticElm);
    staticElm.drop(otherStaticElm, ['above', 'center']);
    return expect(staticElm.nextSibling()).toBe(otherStaticElm);
  });
});
