// Generated by CoffeeScript 1.10.0
describe('`ContentEdit.List()`', function() {
  return it('should return an instance of List`', function() {
    var list;
    list = new ContentEdit.List('ul');
    return expect(list instanceof ContentEdit.List).toBe(true);
  });
});

describe('`ContentEdit.List.cssTypeName()`', function() {
  return it('should return \'list\'', function() {
    var list;
    list = new ContentEdit.List('ul');
    return expect(list.cssTypeName()).toBe('list');
  });
});

describe('`ContentEdit.List.typeName()`', function() {
  return it('should return \'List\'', function() {
    var list;
    list = new ContentEdit.List('ul');
    return expect(list.type()).toBe('List');
  });
});

describe('`ContentEdit.List.typeName()`', function() {
  return it('should return \'List\'', function() {
    var list;
    list = new ContentEdit.List('ul');
    return expect(list.typeName()).toBe('List');
  });
});

describe('`ContentEdit.List.fromDOMElement()`', function() {
  return it('should convert the following DOM elements into a list element: <ol>, <ul>', function() {
    var INDENT, domOl, domUl, ol, ul;
    INDENT = ContentEdit.INDENT;
    domOl = document.createElement('ol');
    domOl.innerHTML = '<li>foo</li>';
    ol = ContentEdit.Text.fromDOMElement(domOl);
    expect(ol.html()).toBe("<ol>\n" + INDENT + "<li>foo</li>\n</ol>");
    domUl = document.createElement('ul');
    domUl.innerHTML = '<li>foo</li>';
    ul = ContentEdit.Text.fromDOMElement(domUl);
    return expect(ul.html()).toBe("<ul>\n" + INDENT + "<li>foo</li>\n</ul>");
  });
});

describe('`ContentEdit.List` drop interactions`', function() {
  var list, region;
  list = null;
  region = null;
  beforeEach(function() {
    region = new ContentEdit.Region(document.createElement('div'));
    list = new ContentEdit.List('ul');
    return region.attach(list);
  });
  it('should support dropping on Image', function() {
    var image;
    image = new ContentEdit.Image({
      'src': '/bar.jpg'
    });
    region.attach(image);
    expect(list.nextSibling()).toBe(image);
    list.drop(image, ['below', 'center']);
    expect(image.nextSibling()).toBe(list);
    list.drop(image, ['above', 'center']);
    return expect(list.nextSibling()).toBe(image);
  });
  it('should support being dropped on by Image', function() {
    var image;
    image = new ContentEdit.Image({
      'src': '/bar.jpg'
    });
    region.attach(image, 0);
    expect(image.nextSibling()).toBe(list);
    image.drop(list, ['above', 'left']);
    expect(image.hasCSSClass('align-left')).toBe(true);
    expect(image.nextSibling()).toBe(list);
    image.drop(list, ['above', 'right']);
    expect(image.hasCSSClass('align-left')).toBe(false);
    expect(image.hasCSSClass('align-right')).toBe(true);
    expect(image.nextSibling()).toBe(list);
    image.drop(list, ['below', 'center']);
    expect(image.hasCSSClass('align-left')).toBe(false);
    expect(image.hasCSSClass('align-right')).toBe(false);
    expect(list.nextSibling()).toBe(image);
    image.drop(list, ['above', 'center']);
    return expect(image.nextSibling()).toBe(list);
  });
  it('should support dropping on List', function() {
    var otherList;
    otherList = new ContentEdit.Image({
      'src': '/bar.jpg'
    });
    region.attach(otherList);
    expect(list.nextSibling()).toBe(otherList);
    list.drop(otherList, ['below', 'center']);
    expect(otherList.nextSibling()).toBe(list);
    list.drop(otherList, ['above', 'center']);
    return expect(list.nextSibling()).toBe(otherList);
  });
  it('should support dropping on PreText', function() {
    var preText;
    preText = new ContentEdit.PreText('pre', {}, '');
    region.attach(preText);
    expect(list.nextSibling()).toBe(preText);
    list.drop(preText, ['below', 'center']);
    expect(preText.nextSibling()).toBe(list);
    list.drop(preText, ['above', 'center']);
    return expect(list.nextSibling()).toBe(preText);
  });
  it('should support being dropped on by PreText', function() {
    var preText;
    preText = new ContentEdit.PreText('pre', {}, '');
    region.attach(preText, 0);
    expect(preText.nextSibling()).toBe(list);
    preText.drop(list, ['below', 'center']);
    expect(list.nextSibling()).toBe(preText);
    preText.drop(list, ['above', 'center']);
    return expect(preText.nextSibling()).toBe(list);
  });
  it('should support dropping on Static', function() {
    var staticElm;
    staticElm = ContentEdit.Static.fromDOMElement(document.createElement('div'));
    region.attach(staticElm);
    expect(list.nextSibling()).toBe(staticElm);
    list.drop(staticElm, ['below', 'center']);
    expect(staticElm.nextSibling()).toBe(list);
    list.drop(staticElm, ['above', 'center']);
    return expect(list.nextSibling()).toBe(staticElm);
  });
  it('should support being dropped on by `moveable` Static', function() {
    var staticElm;
    staticElm = new ContentEdit.Static('div', {
      'data-ce-moveable': 'data-ce-moveable'
    }, 'foo');
    region.attach(staticElm, 0);
    expect(staticElm.nextSibling()).toBe(list);
    staticElm.drop(list, ['below', 'center']);
    expect(list.nextSibling()).toBe(staticElm);
    staticElm.drop(list, ['above', 'center']);
    return expect(staticElm.nextSibling()).toBe(list);
  });
  it('should support dropping on Text', function() {
    var text;
    text = new ContentEdit.Text('p');
    region.attach(text);
    expect(list.nextSibling()).toBe(text);
    list.drop(text, ['below', 'center']);
    expect(text.nextSibling()).toBe(list);
    list.drop(text, ['above', 'center']);
    return expect(list.nextSibling()).toBe(text);
  });
  it('should support being dropped on by Text', function() {
    var text;
    text = new ContentEdit.Text('p');
    region.attach(text, 0);
    expect(text.nextSibling()).toBe(list);
    text.drop(list, ['below', 'center']);
    expect(list.nextSibling()).toBe(text);
    text.drop(list, ['above', 'center']);
    return expect(text.nextSibling()).toBe(list);
  });
  it('should support dropping on Video', function() {
    var video;
    video = new ContentEdit.Video('iframe', {
      'src': '/foo.jpg'
    });
    region.attach(video);
    expect(list.nextSibling()).toBe(video);
    list.drop(video, ['below', 'center']);
    expect(video.nextSibling()).toBe(list);
    list.drop(video, ['above', 'center']);
    return expect(list.nextSibling()).toBe(video);
  });
  return it('should support being dropped on by Video', function() {
    var video;
    video = new ContentEdit.Video('iframe', {
      'src': '/foo.jpg'
    });
    region.attach(video, 0);
    expect(video.nextSibling()).toBe(list);
    video.drop(list, ['above', 'left']);
    expect(video.hasCSSClass('align-left')).toBe(true);
    expect(video.nextSibling()).toBe(list);
    video.drop(list, ['above', 'right']);
    expect(video.hasCSSClass('align-left')).toBe(false);
    expect(video.hasCSSClass('align-right')).toBe(true);
    expect(video.nextSibling()).toBe(list);
    video.drop(list, ['below', 'center']);
    expect(video.hasCSSClass('align-left')).toBe(false);
    expect(video.hasCSSClass('align-right')).toBe(false);
    expect(list.nextSibling()).toBe(video);
    video.drop(list, ['above', 'center']);
    return expect(video.nextSibling()).toBe(list);
  });
});

describe('`ContentEdit.ListItem()`', function() {
  return it('should return an instance of ListLitem`', function() {
    var listItem;
    listItem = new ContentEdit.ListItem();
    return expect(listItem instanceof ContentEdit.ListItem).toBe(true);
  });
});

describe('`ContentEdit.List.cssTypeName()`', function() {
  return it('should return \'list-item\'', function() {
    var listItem;
    listItem = new ContentEdit.ListItem();
    return expect(listItem.cssTypeName()).toBe('list-item');
  });
});

describe('`ContentEdit.ListItem.list()`', function() {
  return it('should return any associated List element, or null if there isn\'t one', function() {
    var list, listItem, listItemText;
    listItem = new ContentEdit.ListItem();
    expect(listItem.list()).toBe(null);
    listItemText = new ContentEdit.ListItemText('foo');
    listItem.attach(listItemText);
    expect(listItem.list()).toBe(null);
    list = new ContentEdit.List('ul');
    listItem.attach(list);
    return expect(listItem.list()).toBe(list);
  });
});

describe('`ContentEdit.ListItem.listItemText()`', function() {
  return it('should return any associated ListItemText element, or null if there isn\'t one', function() {
    var listItem, listItemText;
    listItem = new ContentEdit.ListItem();
    expect(listItem.listItemText()).toBe(null);
    listItemText = new ContentEdit.ListItemText('foo');
    listItem.attach(listItemText);
    return expect(listItem.listItemText()).toBe(listItemText);
  });
});

describe('`ContentEdit.ListItem.type()`', function() {
  return it('should return \'ListItem\'', function() {
    var listItem;
    listItem = new ContentEdit.ListItem();
    return expect(listItem.type()).toBe('ListItem');
  });
});

describe('ContentEdit.ListItem.html()', function() {
  return it('should return a HTML string for the list element', function() {
    var listItem, listItemText;
    listItem = new ContentEdit.ListItem({
      'class': 'foo'
    });
    listItemText = new ContentEdit.ListItemText('bar');
    listItem.attach(listItemText);
    return expect(listItem.html()).toBe('<li class="foo">\n' + (ContentEdit.INDENT + "bar\n") + '</li>');
  });
});

describe('ContentEdit.ListItem.indent()', function() {
  return it('should indent an item in a list by at most one level', function() {
    var I, domElement, list;
    I = ContentEdit.INDENT;
    domElement = document.createElement('ul');
    domElement.innerHTML = '<li>One</li>\n<li>Two</li>\n<li>Three</li>';
    list = ContentEdit.List.fromDOMElement(domElement);
    list.children[0].indent();
    expect(list.html()).toBe("<ul>\n" + I + "<li>\n" + I + I + "One\n" + I + "</li>\n" + I + "<li>\n" + I + I + "Two\n" + I + "</li>\n" + I + "<li>\n" + I + I + "Three\n" + I + "</li>\n</ul>");
    list.children[2].indent();
    expect(list.html()).toBe("<ul>\n" + I + "<li>\n" + I + I + "One\n" + I + "</li>\n" + I + "<li>\n" + I + I + "Two\n" + I + I + "<ul>\n" + I + I + I + "<li>\n" + I + I + I + I + "Three\n" + I + I + I + "</li>\n" + I + I + "</ul>\n" + I + "</li>\n</ul>");
    list.children[1].indent();
    return expect(list.html()).toBe("<ul>\n" + I + "<li>\n" + I + I + "One\n" + I + I + "<ul>\n" + I + I + I + "<li>\n" + I + I + I + I + "Two\n" + I + I + I + I + "<ul>\n" + I + I + I + I + I + "<li>\n" + I + I + I + I + I + I + "Three\n" + I + I + I + I + I + "</li>\n" + I + I + I + I + "</ul>\n" + I + I + I + "</li>\n" + I + I + "</ul>\n" + I + "</li>\n</ul>");
  });
});

describe('ContentEdit.ListItem.remove()', function() {
  return it('should remove an item from a list keeping integrity of the lists structure', function() {
    var I, domElement, list;
    I = ContentEdit.INDENT;
    domElement = document.createElement('ul');
    domElement.innerHTML = '<li>One</li>\n<li>Two</li>\n<li>\n    Three\n    <ul>\n        <li>Alpha</li>\n        <li>Beta</li>\n    </ul>\n</li>';
    list = ContentEdit.List.fromDOMElement(domElement);
    list.children[2].list().children[1].remove();
    expect(list.html()).toBe("<ul>\n" + I + "<li>\n" + I + I + "One\n" + I + "</li>\n" + I + "<li>\n" + I + I + "Two\n" + I + "</li>\n" + I + "<li>\n" + I + I + "Three\n" + I + I + "<ul>\n" + I + I + I + "<li>\n" + I + I + I + I + "Alpha\n" + I + I + I + "</li>\n" + I + I + "</ul>\n" + I + "</li>\n</ul>");
    list.children[2].remove();
    expect(list.html()).toBe("<ul>\n" + I + "<li>\n" + I + I + "One\n" + I + "</li>\n" + I + "<li>\n" + I + I + "Two\n" + I + "</li>\n" + I + "<li>\n" + I + I + "Alpha\n" + I + "</li>\n</ul>");
    list.children[0].remove();
    return expect(list.html()).toBe("<ul>\n" + I + "<li>\n" + I + I + "Two\n" + I + "</li>\n" + I + "<li>\n" + I + I + "Alpha\n" + I + "</li>\n</ul>");
  });
});

describe('ContentEdit.ListItem.unindent()', function() {
  return it('should indent an item in a list or remove it and convert to a text element if it can\'t be unindented any further', function() {
    var I, domElement, list, region;
    I = ContentEdit.INDENT;
    domElement = document.createElement('ul');
    domElement.innerHTML = '<li>One</li>\n<li>Two</li>\n<li>\n    Three\n    <ul>\n        <li>\n            Alpha\n            <ul>\n                <li>Beta</li>\n                <li>Gamma</li>\n            </ul>\n        </li>\n    </ul>\n</li>';
    list = ContentEdit.List.fromDOMElement(domElement);
    region = new ContentEdit.Region(document.createElement('div'));
    region.attach(list);
    list.children[2].list().children[0].list().children[0].unindent();
    expect(region.html()).toBe("<ul>\n" + I + "<li>\n" + I + I + "One\n" + I + "</li>\n" + I + "<li>\n" + I + I + "Two\n" + I + "</li>\n" + I + "<li>\n" + I + I + "Three\n" + I + I + "<ul>\n" + I + I + I + "<li>\n" + I + I + I + I + "Alpha\n" + I + I + I + "</li>\n" + I + I + I + "<li>\n" + I + I + I + I + "Beta\n" + I + I + I + I + "<ul>\n" + I + I + I + I + I + "<li>\n" + I + I + I + I + I + I + "Gamma\n" + I + I + I + I + I + "</li>\n" + I + I + I + I + "</ul>\n" + I + I + I + "</li>\n" + I + I + "</ul>\n" + I + "</li>\n</ul>");
    list.children[2].list().children[1].list().children[0].unindent();
    expect(region.html()).toBe("<ul>\n" + I + "<li>\n" + I + I + "One\n" + I + "</li>\n" + I + "<li>\n" + I + I + "Two\n" + I + "</li>\n" + I + "<li>\n" + I + I + "Three\n" + I + I + "<ul>\n" + I + I + I + "<li>\n" + I + I + I + I + "Alpha\n" + I + I + I + "</li>\n" + I + I + I + "<li>\n" + I + I + I + I + "Beta\n" + I + I + I + "</li>\n" + I + I + I + "<li>\n" + I + I + I + I + "Gamma\n" + I + I + I + "</li>\n" + I + I + "</ul>\n" + I + "</li>\n</ul>");
    list.children[0].unindent();
    expect(region.html()).toBe("<p>\n" + I + "One\n</p>\n<ul>\n" + I + "<li>\n" + I + I + "Two\n" + I + "</li>\n" + I + "<li>\n" + I + I + "Three\n" + I + I + "<ul>\n" + I + I + I + "<li>\n" + I + I + I + I + "Alpha\n" + I + I + I + "</li>\n" + I + I + I + "<li>\n" + I + I + I + I + "Beta\n" + I + I + I + "</li>\n" + I + I + I + "<li>\n" + I + I + I + I + "Gamma\n" + I + I + I + "</li>\n" + I + I + "</ul>\n" + I + "</li>\n</ul>");
    list.children[1].list().children[0].unindent();
    list.children[2].list().children[0].unindent();
    list.children[3].list().children[0].unindent();
    list.children[4].unindent();
    expect(region.html()).toBe("<p>\n" + I + "One\n</p>\n<ul>\n" + I + "<li>\n" + I + I + "Two\n" + I + "</li>\n" + I + "<li>\n" + I + I + "Three\n" + I + "</li>\n" + I + "<li>\n" + I + I + "Alpha\n" + I + "</li>\n" + I + "<li>\n" + I + I + "Beta\n" + I + "</li>\n</ul>\n<p>\n" + I + "Gamma\n</p>");
    list.children[1].unindent();
    return expect(region.html()).toBe("<p>\n" + I + "One\n</p>\n<ul>\n" + I + "<li>\n" + I + I + "Two\n" + I + "</li>\n</ul>\n<p>\n" + I + "Three\n</p>\n<ul>\n" + I + "<li>\n" + I + I + "Alpha\n" + I + "</li>\n" + I + "<li>\n" + I + I + "Beta\n" + I + "</li>\n</ul>\n<p>\n" + I + "Gamma\n</p>");
  });
});

describe('`ContentEdit.ListItem.fromDOMElement()`', function() {
  return it('should convert a <li> DOM element into an ListItem element', function() {
    var I, domLi, li;
    I = ContentEdit.INDENT;
    domLi = document.createElement('li');
    domLi.innerHTML = 'foo';
    li = ContentEdit.ListItem.fromDOMElement(domLi);
    expect(li.html()).toBe("<li>\n" + I + "foo\n</li>");
    domLi = document.createElement('li');
    domLi.innerHTML = 'foo\n<ul>\n    <li>bar</li>\n</ul>';
    li = ContentEdit.ListItem.fromDOMElement(domLi);
    return expect(li.html()).toBe("<li>\n" + I + "foo\n" + I + "<ul>\n" + I + I + "<li>\n" + I + I + I + "bar\n" + I + I + "</li>\n" + I + "</ul>\n</li>");
  });
});

describe('`ContentEdit.ListItemText()`', function() {
  return it('should return an instance of ListItemText`', function() {
    var listItemText;
    listItemText = new ContentEdit.ListItemText('foo');
    return expect(listItemText instanceof ContentEdit.ListItemText).toBe(true);
  });
});

describe('`ContentEdit.ListItemText.cssTypeName()`', function() {
  return it('should return \'list-item-text\'', function() {
    var listItemText;
    listItemText = new ContentEdit.ListItemText('foo');
    return expect(listItemText.cssTypeName()).toBe('list-item-text');
  });
});

describe('`ContentEdit.ListItemText.type()`', function() {
  return it('should return \'ListItemText\'', function() {
    var listItemText;
    listItemText = new ContentEdit.ListItemText();
    return expect(listItemText.type()).toBe('ListItemText');
  });
});

describe('`ContentEdit.ListItemText.typeName()`', function() {
  return it('should return \'List item\'', function() {
    var listItemText;
    listItemText = new ContentEdit.ListItemText('foo');
    return expect(listItemText.typeName()).toBe('List item');
  });
});

describe('`ContentEdit.ListItemText.blur()`', function() {
  var region, root;
  root = ContentEdit.Root.get();
  region = null;
  beforeEach(function() {
    document.getElementById('test').innerHTML = '<ul>\n    <li>foo</li>\n    <li>bar</li>\n    <li>zee</li>\n</ul>';
    region = new ContentEdit.Region(document.getElementById('test'));
    return region.children[0].children[1].listItemText().focus();
  });
  afterEach(function() {
    var child, i, len, ref, results;
    ref = region.children.slice();
    results = [];
    for (i = 0, len = ref.length; i < len; i++) {
      child = ref[i];
      results.push(region.detach(child));
    }
    return results;
  });
  it('should blur the list item text element', function() {
    var listItemText;
    listItemText = region.children[0].children[1].listItemText();
    listItemText.blur();
    return expect(listItemText.isFocused()).toBe(false);
  });
  it('should remove the list item text element if it\'s just whitespace', function() {
    var listItemText;
    listItemText = region.children[0].children[1].listItemText();
    listItemText.content = new HTMLString.String('');
    listItemText.blur();
    return expect(listItemText.parent().parent()).toBe(null);
  });
  return it('should trigger the `blur` event against the root', function() {
    var foo, listItemText;
    foo = {
      handleFoo: function() {}
    };
    spyOn(foo, 'handleFoo');
    root.bind('blur', foo.handleFoo);
    listItemText = region.children[0].children[1].listItemText();
    listItemText.blur();
    return expect(foo.handleFoo).toHaveBeenCalledWith(listItemText);
  });
});

describe('ContentEdit.Text.html()', function() {
  return it('should return a HTML string for the list item text element', function() {
    var listItemText;
    listItemText = new ContentEdit.ListItemText('bar <b>zee</b>');
    return expect(listItemText.html()).toBe('bar <b>zee</b>');
  });
});

describe('`ContentEdit.ListItemText` key events`', function() {
  var ev, list, listItem, listItemText, region, root;
  ev = null;
  list = null;
  listItem = null;
  listItemText = null;
  region = null;
  root = ContentEdit.Root.get();
  beforeEach(function() {
    ev = {
      preventDefault: function() {}
    };
    document.getElementById('test').innerHTML = '<ul>\n    <li>foo</li>\n    <li>bar</li>\n    <li>zee</li>\n</ul>';
    region = new ContentEdit.Region(document.getElementById('test'));
    list = region.children[0];
    listItem = list.children[1];
    return listItemText = listItem.listItemText();
  });
  afterEach(function() {
    var child, i, len, ref, results;
    ref = region.children.slice();
    results = [];
    for (i = 0, len = ref.length; i < len; i++) {
      child = ref[i];
      results.push(region.detach(child));
    }
    return results;
  });
  it('should support return splitting the element into 2', function() {
    listItemText.focus();
    new ContentSelect.Range(2, 2).select(listItemText.domElement());
    listItemText._keyReturn(ev);
    expect(listItemText.content.text()).toBe('ba');
    return expect(listItemText.nextContent().content.text()).toBe('r');
  });
  it('should support using tab to indent', function() {
    spyOn(listItem, 'indent');
    listItemText.focus();
    listItemText._keyTab(ev);
    return expect(listItem.indent).toHaveBeenCalled();
  });
  return it('should support using shift-tab to unindent', function() {
    spyOn(listItem, 'unindent');
    ev.shiftKey = true;
    listItemText.focus();
    listItemText._keyTab(ev);
    return expect(listItem.unindent).toHaveBeenCalled();
  });
});

describe('`ContentEdit.ListItemText` drop interactions`', function() {
  var I, listItemText, region;
  I = ContentEdit.INDENT;
  listItemText = null;
  region = null;
  beforeEach(function() {
    var domElement;
    domElement = document.createElement('div');
    domElement.innerHTML = '<ul>\n    <li>foo</li>\n    <li>bar</li>\n</ul>\n<p>zee</p>';
    region = new ContentEdit.Region(domElement);
    return listItemText = region.children[0].children[0].listItemText();
  });
  it('should support dropping on ListItemText', function() {
    var otherListItemText;
    otherListItemText = region.children[0].children[1].listItemText();
    expect(listItemText.parent().nextSibling()).toBe(otherListItemText.parent());
    listItemText.drop(otherListItemText, ['below', 'center']);
    expect(otherListItemText.parent().nextSibling()).toBe(listItemText.parent());
    listItemText.drop(otherListItemText, ['above', 'center']);
    return expect(listItemText.parent().nextSibling()).toBe(otherListItemText.parent());
  });
  it('should support dropping on Text', function() {
    var text;
    text = region.children[1];
    listItemText.drop(text, ['below', 'center']);
    expect(region.html()).toBe("<ul>\n" + I + "<li>\n" + I + I + "bar\n" + I + "</li>\n</ul>\n<p>\n" + I + "zee\n</p>\n<p>\n" + I + "foo\n</p>");
    listItemText = region.children[0].children[0].listItemText();
    listItemText.drop(text, ['above', 'center']);
    return expect(region.html()).toBe("<p>\n" + I + "bar\n</p>\n<p>\n" + I + "zee\n</p>\n<p>\n" + I + "foo\n</p>");
  });
  return it('should support being dropped on by Text', function() {
    var text;
    text = region.children[1];
    text.drop(listItemText, ['below', 'center']);
    expect(region.html()).toBe("<ul>\n" + I + "<li>\n" + I + I + "foo\n" + I + "</li>\n" + I + "<li>\n" + I + I + "zee\n" + I + "</li>\n" + I + "<li>\n" + I + I + "bar\n" + I + "</li>\n</ul>");
    text = new ContentEdit.Text('p', {}, 'umm');
    region.attach(text, 0);
    text.drop(listItemText, ['above', 'center']);
    return expect(region.html()).toBe("<ul>\n" + I + "<li>\n" + I + I + "umm\n" + I + "</li>\n" + I + "<li>\n" + I + I + "foo\n" + I + "</li>\n" + I + "<li>\n" + I + I + "zee\n" + I + "</li>\n" + I + "<li>\n" + I + I + "bar\n" + I + "</li>\n</ul>");
  });
});

describe('`ContentEdit.Text` merge interactions`', function() {
  var I, region;
  I = ContentEdit.INDENT;
  region = null;
  beforeEach(function() {
    var domElement;
    domElement = document.getElementById('test');
    domElement.innerHTML = '<p>foo</p>\n<ul>\n    <li>bar</li>\n    <li>zee</li>\n</ul>\n<p>umm</p>';
    return region = new ContentEdit.Region(domElement);
  });
  afterEach(function() {
    var child, i, len, ref, results;
    ref = region.children.slice();
    results = [];
    for (i = 0, len = ref.length; i < len; i++) {
      child = ref[i];
      results.push(region.detach(child));
    }
    return results;
  });
  it('should support merging with ListItemText', function() {
    var listItemTextA, listItemTextB;
    listItemTextA = region.children[1].children[0].listItemText();
    listItemTextB = region.children[1].children[1].listItemText();
    listItemTextA.merge(listItemTextB);
    return expect(listItemTextA.html()).toBe('barzee');
  });
  return it('should support merging with Text', function() {
    var listItemText, text;
    text = region.children[2];
    listItemText = region.children[1].children[1].listItemText();
    listItemText.merge(text);
    expect(region.html()).toBe("<p>\n" + I + "foo\n</p>\n<ul>\n" + I + "<li>\n" + I + I + "bar\n" + I + "</li>\n" + I + "<li>\n" + I + I + "zeeumm\n" + I + "</li>\n</ul>");
    text = region.children[0];
    listItemText = region.children[1].children[0].listItemText();
    text.merge(listItemText);
    return expect(region.html()).toBe("<p>\n" + I + "foobar\n</p>\n<ul>\n" + I + "<li>\n" + I + I + "zeeumm\n" + I + "</li>\n</ul>");
  });
});
