// Generated by CoffeeScript 1.10.0
describe('ContentEdit', function() {
  return it('should have correct default settings', function() {
    expect(ContentEdit.DEFAULT_MAX_ELEMENT_WIDTH).toBe(800);
    expect(ContentEdit.DEFAULT_MIN_ELEMENT_WIDTH).toBe(80);
    expect(ContentEdit.DRAG_HOLD_DURATION).toBe(500);
    expect(ContentEdit.DROP_EDGE_SIZE).toBe(50);
    expect(ContentEdit.HELPER_CHAR_LIMIT).toBe(250);
    expect(ContentEdit.INDENT).toBe('    ');
    expect(ContentEdit.LANGUAGE).toBe('en');
    return expect(ContentEdit.RESIZE_CORNER_SIZE).toBe(15);
  });
});

describe('ContentEdit._', function() {
  return it('should return a translated string for the current language', function() {
    ContentEdit.addTranslations('fr', {
      'hello': 'bonjour'
    });
    ContentEdit.addTranslations('de', {
      'hello': 'hallo'
    });
    expect(ContentEdit._('hello')).toBe('hello');
    ContentEdit.LANGUAGE = 'fr';
    expect(ContentEdit._('hello')).toBe('bonjour');
    ContentEdit.LANGUAGE = 'de';
    expect(ContentEdit._('hello')).toBe('hallo');
    expect(ContentEdit._('goodbye')).toBe('goodbye');
    return ContentEdit.LANGUAGE = 'en';
  });
});

describe('ContentEdit.addCSSClass()', function() {
  return it('should add a CSS class to a DOM element', function() {
    var domElement;
    domElement = document.createElement('div');
    ContentEdit.addCSSClass(domElement, 'foo');
    expect(domElement.getAttribute('class')).toBe('foo');
    ContentEdit.addCSSClass(domElement, 'bar');
    return expect(domElement.getAttribute('class')).toBe('foo bar');
  });
});

describe('ContentEdit.attributesToString()', function() {
  return it('should convert a dictionary into a key="value" string', function() {
    var attributes, string;
    attributes = {
      'id': 'foo',
      'class': 'bar'
    };
    string = ContentEdit.attributesToString(attributes);
    return expect(string).toBe('class="bar" id="foo"');
  });
});

describe('ContentEdit.removeCSSClass()', function() {
  it('should remove a CSS class from a DOM element', function() {
    var domElement;
    domElement = document.createElement('div');
    ContentEdit.addCSSClass(domElement, 'foo');
    ContentEdit.addCSSClass(domElement, 'bar');
    ContentEdit.removeCSSClass(domElement, 'foo');
    expect(domElement.getAttribute('class')).toBe('bar');
    ContentEdit.removeCSSClass(domElement, 'bar');
    return expect(domElement.getAttribute('class')).toBe(null);
  });
  return it('should do nothing if the CSS class being removed is not set against the DOM element', function() {
    var domElement;
    domElement = document.createElement('div');
    ContentEdit.addCSSClass(domElement, 'foo');
    ContentEdit.addCSSClass(domElement, 'bar');
    ContentEdit.removeCSSClass(domElement, 'zee');
    return expect(domElement.getAttribute('class')).toBe('foo bar');
  });
});
