// Generated by CoffeeScript 1.10.0
describe('`ContentEdit.Image()`', function() {
  return it('should return an instance of Image`', function() {
    var image;
    image = new ContentEdit.Image({
      'src': '/foo.jpg'
    });
    expect(image instanceof ContentEdit.Image).toBe(true);
    image = new ContentEdit.Image({
      'src': '/foo.jpg'
    }, {
      'href': 'bar'
    });
    return expect(image instanceof ContentEdit.Image).toBe(true);
  });
});

describe('`ContentEdit.Image.cssTypeName()`', function() {
  return it('should return \'image\'', function() {
    var image;
    image = new ContentEdit.Image({
      'src': '/foo.jpg'
    });
    return expect(image.cssTypeName()).toBe('image');
  });
});

describe('`ContentEdit.Image.type()`', function() {
  return it('should return \'Image\'', function() {
    var image;
    image = new ContentEdit.Image({
      'src': '/foo.jpg'
    });
    return expect(image.type()).toBe('Image');
  });
});

describe('`ContentEdit.Image.typeName()`', function() {
  return it('should return \'Image\'', function() {
    var image;
    image = new ContentEdit.Image({
      'src': '/foo.jpg'
    });
    return expect(image.typeName()).toBe('Image');
  });
});

describe('`ContentEdit.Image.createDraggingDOMElement()`', function() {
  return it('should create a helper DOM element', function() {
    var helper, image, region;
    image = new ContentEdit.Image({
      'src': 'http://getme.co.uk/foo.jpg'
    });
    region = new ContentEdit.Region(document.createElement('div'));
    region.attach(image);
    helper = image.createDraggingDOMElement();
    expect(helper).not.toBe(null);
    expect(helper.tagName.toLowerCase()).toBe('div');
    return expect(helper.style.backgroundImage.replace(/"/g, '')).toBe('url(http://getme.co.uk/foo.jpg)');
  });
});

describe('`ContentEdit.Image.html()`', function() {
  return it('should return a HTML string for the image', function() {
    var image;
    image = new ContentEdit.Image({
      'src': '/foo.jpg'
    });
    expect(image.html()).toBe('<img src="/foo.jpg">');
    image = new ContentEdit.Image({
      'src': '/foo.jpg'
    }, {
      'href': 'bar'
    });
    return expect(image.html()).toBe('<a href="bar" data-ce-tag="img">\n' + (ContentEdit.INDENT + "<img src=\"/foo.jpg\">\n") + '</a>');
  });
});

describe('`ContentEdit.Image.mount()`', function() {
  var imageA, imageB, region;
  imageA = null;
  imageB = null;
  region = null;
  beforeEach(function() {
    imageA = new ContentEdit.Image({
      'src': '/foo.jpg'
    });
    imageB = new ContentEdit.Image({
      'src': '/foo.jpg'
    }, {
      'href': 'bar'
    });
    region = new ContentEdit.Region(document.createElement('div'));
    region.attach(imageA);
    region.attach(imageB);
    imageA.unmount();
    return imageB.unmount();
  });
  it('should mount the image to the DOM', function() {
    imageA.mount();
    imageB.mount();
    expect(imageA.isMounted()).toBe(true);
    return expect(imageB.isMounted()).toBe(true);
  });
  return it('should trigger the `mount` event against the root', function() {
    var foo, root;
    foo = {
      handleFoo: function() {}
    };
    spyOn(foo, 'handleFoo');
    root = ContentEdit.Root.get();
    root.bind('mount', foo.handleFoo);
    imageA.mount();
    return expect(foo.handleFoo).toHaveBeenCalledWith(imageA);
  });
});

describe('`ContentEdit.Image.fromDOMElement()`', function() {
  it('should convert a <img> DOM element into an image element', function() {
    var domImg, img;
    domImg = document.createElement('img');
    domImg.setAttribute('src', '/foo.jpg');
    domImg.setAttribute('width', '400');
    domImg.setAttribute('height', '300');
    img = ContentEdit.Image.fromDOMElement(domImg);
    return expect(img.html()).toBe('<img height="300" src="/foo.jpg" width="400">');
  });
  it('should read the natural width of the image if not supplied as an attribute', function() {
    var domImg, img;
    domImg = document.createElement('img');
    domImg.setAttribute('src', 'data:image/gif;' + 'base64,R0lGODlhAQABAAAAACH5BAEKAAEALAAAAAABAAEAAAICTAEAOw==');
    img = ContentEdit.Image.fromDOMElement(domImg);
    return expect(img.size()).toEqual([1, 1]);
  });
  return it('should convert a wrapped <a><img></a> DOM element into an image element', function() {
    var domA, domImg, img;
    domA = document.createElement('a');
    domA.setAttribute('href', 'test');
    domImg = document.createElement('img');
    domImg.setAttribute('src', '/foo.jpg');
    domImg.setAttribute('width', '400');
    domImg.setAttribute('height', '300');
    domA.appendChild(domImg);
    img = ContentEdit.Image.fromDOMElement(domA);
    return expect(img.html()).toBe('<a href="test" data-ce-tag="img">\n' + ("" + ContentEdit.INDENT) + '<img height="300" src="/foo.jpg" width="400">\n' + '</a>');
  });
});

describe('`ContentEdit.Image` drop interactions', function() {
  var image, region;
  image = null;
  region = null;
  beforeEach(function() {
    region = new ContentEdit.Region(document.createElement('div'));
    image = new ContentEdit.Image({
      'src': '/foo.jpg'
    });
    return region.attach(image);
  });
  it('should support dropping on Image', function() {
    var otherImage;
    otherImage = new ContentEdit.Image({
      'src': '/bar.jpg'
    });
    region.attach(otherImage);
    expect(image.nextSibling()).toBe(otherImage);
    image.drop(otherImage, ['above', 'left']);
    expect(image.hasCSSClass('align-left')).toBe(true);
    expect(image.nextSibling()).toBe(otherImage);
    image.drop(otherImage, ['above', 'right']);
    expect(image.hasCSSClass('align-left')).toBe(false);
    expect(image.hasCSSClass('align-right')).toBe(true);
    expect(image.nextSibling()).toBe(otherImage);
    image.drop(otherImage, ['below', 'center']);
    expect(image.hasCSSClass('align-left')).toBe(false);
    expect(image.hasCSSClass('align-right')).toBe(false);
    expect(otherImage.nextSibling()).toBe(image);
    image.drop(otherImage, ['above', 'center']);
    return expect(image.nextSibling()).toBe(otherImage);
  });
  it('should support dropping on PreText', function() {
    var preText;
    preText = new ContentEdit.PreText('pre', {}, '');
    region.attach(preText);
    expect(image.nextSibling()).toBe(preText);
    image.drop(preText, ['above', 'left']);
    expect(image.hasCSSClass('align-left')).toBe(true);
    expect(image.nextSibling()).toBe(preText);
    image.drop(preText, ['above', 'right']);
    expect(image.hasCSSClass('align-left')).toBe(false);
    expect(image.hasCSSClass('align-right')).toBe(true);
    expect(image.nextSibling()).toBe(preText);
    image.drop(preText, ['below', 'center']);
    expect(image.hasCSSClass('align-left')).toBe(false);
    expect(image.hasCSSClass('align-right')).toBe(false);
    expect(preText.nextSibling()).toBe(image);
    image.drop(preText, ['above', 'center']);
    return expect(image.nextSibling()).toBe(preText);
  });
  it('should support being dropped on by PreText', function() {
    var preText;
    preText = new ContentEdit.PreText('pre', {}, '');
    region.attach(preText, 0);
    expect(preText.nextSibling()).toBe(image);
    preText.drop(image, ['below', 'center']);
    expect(image.nextSibling()).toBe(preText);
    preText.drop(image, ['above', 'center']);
    return expect(preText.nextSibling()).toBe(image);
  });
  it('should support dropping on Static', function() {
    var staticElm;
    staticElm = ContentEdit.Static.fromDOMElement(document.createElement('div'));
    region.attach(staticElm);
    expect(image.nextSibling()).toBe(staticElm);
    image.drop(staticElm, ['above', 'left']);
    expect(image.hasCSSClass('align-left')).toBe(true);
    expect(image.nextSibling()).toBe(staticElm);
    image.drop(staticElm, ['above', 'right']);
    expect(image.hasCSSClass('align-left')).toBe(false);
    expect(image.hasCSSClass('align-right')).toBe(true);
    expect(image.nextSibling()).toBe(staticElm);
    image.drop(staticElm, ['below', 'center']);
    expect(image.hasCSSClass('align-left')).toBe(false);
    expect(image.hasCSSClass('align-right')).toBe(false);
    expect(staticElm.nextSibling()).toBe(image);
    image.drop(staticElm, ['above', 'center']);
    return expect(image.nextSibling()).toBe(staticElm);
  });
  it('should support being dropped on by `moveable` Static', function() {
    var staticElm;
    staticElm = new ContentEdit.Static('div', {
      'data-ce-moveable': 'data-ce-moveable'
    }, 'foo');
    region.attach(staticElm, 0);
    expect(staticElm.nextSibling()).toBe(image);
    staticElm.drop(image, ['below', 'center']);
    expect(image.nextSibling()).toBe(staticElm);
    staticElm.drop(image, ['above', 'center']);
    return expect(staticElm.nextSibling()).toBe(image);
  });
  it('should support dropping on Text', function() {
    var text;
    text = new ContentEdit.Text('p');
    region.attach(text);
    expect(image.nextSibling()).toBe(text);
    image.drop(text, ['above', 'left']);
    expect(image.hasCSSClass('align-left')).toBe(true);
    expect(image.nextSibling()).toBe(text);
    image.drop(text, ['above', 'right']);
    expect(image.hasCSSClass('align-left')).toBe(false);
    expect(image.hasCSSClass('align-right')).toBe(true);
    expect(image.nextSibling()).toBe(text);
    image.drop(text, ['below', 'center']);
    expect(image.hasCSSClass('align-left')).toBe(false);
    expect(image.hasCSSClass('align-right')).toBe(false);
    expect(text.nextSibling()).toBe(image);
    image.drop(text, ['above', 'center']);
    return expect(image.nextSibling()).toBe(text);
  });
  return it('should support being dropped on by Text', function() {
    var text;
    text = new ContentEdit.Text('p');
    region.attach(text, 0);
    expect(text.nextSibling()).toBe(image);
    text.drop(image, ['below', 'center']);
    expect(image.nextSibling()).toBe(text);
    text.drop(image, ['above', 'center']);
    return expect(text.nextSibling()).toBe(image);
  });
});
