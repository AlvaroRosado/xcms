// Generated by CoffeeScript 1.10.0
describe('`ContentEdit.Video()`', function() {
  return it('should return an instance of Video`', function() {
    var video;
    video = new ContentEdit.Video('video', {}, []);
    return expect(video instanceof ContentEdit.Video).toBe(true);
  });
});

describe('`ContentEdit.Video.cssTypeName()`', function() {
  return it('should return \'video\'', function() {
    var video;
    video = new ContentEdit.Video('video', {}, []);
    return expect(video.cssTypeName()).toBe('video');
  });
});

describe('`ContentEdit.Video.type()`', function() {
  return it('should return \'video\'', function() {
    var video;
    video = new ContentEdit.Video('video', {}, []);
    return expect(video.type()).toBe('Video');
  });
});

describe('`ContentEdit.Video.typeName()`', function() {
  return it('should return \'video\'', function() {
    var video;
    video = new ContentEdit.Video('video', {}, []);
    return expect(video.typeName()).toBe('Video');
  });
});

describe('`ContentEdit.Video.createDraggingDOMElement()`', function() {
  var region;
  region = null;
  beforeEach(function() {
    return region = new ContentEdit.Region(document.createElement('div'));
  });
  it('should create a helper DOM element using the sources list for <video> elements', function() {
    var helper, video;
    video = new ContentEdit.Video('video', {}, [
      {
        'src': 'foo.mp4'
      }
    ]);
    region.attach(video);
    helper = video.createDraggingDOMElement();
    expect(helper).not.toBe(null);
    expect(helper.tagName.toLowerCase()).toBe('div');
    return expect(helper.innerHTML).toBe('foo.mp4');
  });
  return it('should create a helper DOM element using the src attribute for other elements (e.g iframes)', function() {
    var helper, video;
    video = new ContentEdit.Video('iframe', {
      'src': 'foo.mp4'
    });
    region.attach(video);
    helper = video.createDraggingDOMElement();
    expect(helper).not.toBe(null);
    expect(helper.tagName.toLowerCase()).toBe('div');
    return expect(helper.innerHTML).toBe('foo.mp4');
  });
});

describe('`ContentEdit.Video.html()`', function() {
  return it('should return a HTML string for the image', function() {
    var INDENT, video;
    INDENT = ContentEdit.INDENT;
    video = new ContentEdit.Video('video', {
      'controls': ''
    }, [
      {
        'src': 'foo.mp4',
        'type': 'video/mp4'
      }, {
        'src': 'bar.ogg',
        'type': 'video/ogg'
      }
    ]);
    expect(video.html()).toBe('<video controls>\n' + (INDENT + "<source src=\"foo.mp4\" type=\"video/mp4\">\n") + (INDENT + "<source src=\"bar.ogg\" type=\"video/ogg\">\n") + '</video>');
    video = new ContentEdit.Video('iframe', {
      'src': 'foo.mp4'
    });
    return expect(video.html()).toBe('<iframe src="foo.mp4"></iframe>');
  });
});

describe('`ContentEdit.Video.mount()`', function() {
  var region, videoA, videoB;
  videoA = null;
  videoB = null;
  region = null;
  beforeEach(function() {
    videoA = new ContentEdit.Video('video', {
      'controls': ''
    }, [
      {
        'src': 'foo.mp4',
        'type': 'video/mp4'
      }, {
        'src': 'bar.ogg',
        'type': 'video/ogg'
      }
    ]);
    videoB = new ContentEdit.Video('iframe', {
      'src': 'foo.mp4'
    });
    region = new ContentEdit.Region(document.createElement('div'));
    region.attach(videoA);
    region.attach(videoB);
    videoA.unmount();
    return videoB.unmount();
  });
  it('should mount the image to the DOM', function() {
    videoA.mount();
    videoB.mount();
    expect(videoA.isMounted()).toBe(true);
    return expect(videoB.isMounted()).toBe(true);
  });
  return it('should trigger the `mount` event against the root', function() {
    var foo, root;
    foo = {
      handleFoo: function() {}
    };
    spyOn(foo, 'handleFoo');
    root = ContentEdit.Root.get();
    root.bind('mount', foo.handleFoo);
    videoA.mount();
    return expect(foo.handleFoo).toHaveBeenCalledWith(videoA);
  });
});

describe('`ContentEdit.Video.fromDOMElement()`', function() {
  var INDENT;
  INDENT = ContentEdit.INDENT;
  it('should convert a <video> DOM element into a video element', function() {
    var domVideo, video;
    domVideo = document.createElement('video');
    domVideo.setAttribute('controls', '');
    domVideo.innerHTML += '<source src="foo.mp4" type="video/mp4">';
    domVideo.innerHTML += '<source src="bar.ogg" type="video/ogg">';
    video = ContentEdit.Video.fromDOMElement(domVideo);
    return expect(video.html()).toBe('<video controls>\n' + (INDENT + "<source src=\"foo.mp4\" type=\"video/mp4\">\n") + (INDENT + "<source src=\"bar.ogg\" type=\"video/ogg\">\n") + '</video>');
  });
  return it('should convert an iframe <iframe> DOM element into a video element', function() {
    var domVideo, video;
    domVideo = document.createElement('iframe');
    domVideo.setAttribute('src', 'foo.mp4');
    video = ContentEdit.Video.fromDOMElement(domVideo);
    return expect(video.html()).toBe('<iframe src="foo.mp4"></iframe>');
  });
});

describe('`ContentEdit.Video` drop interactions`', function() {
  var region, video;
  video = null;
  region = null;
  beforeEach(function() {
    region = new ContentEdit.Region(document.createElement('div'));
    video = new ContentEdit.Video('iframe', {
      'src': '/foo.jpg'
    });
    return region.attach(video);
  });
  it('should support dropping on Image', function() {
    var image;
    image = new ContentEdit.Image({
      'src': '/bar.jpg'
    });
    region.attach(image);
    expect(video.nextSibling()).toBe(image);
    video.drop(image, ['above', 'left']);
    expect(video.hasCSSClass('align-left')).toBe(true);
    expect(video.nextSibling()).toBe(image);
    video.drop(image, ['above', 'right']);
    expect(video.hasCSSClass('align-left')).toBe(false);
    expect(video.hasCSSClass('align-right')).toBe(true);
    expect(video.nextSibling()).toBe(image);
    video.drop(image, ['below', 'center']);
    expect(video.hasCSSClass('align-left')).toBe(false);
    expect(video.hasCSSClass('align-right')).toBe(false);
    expect(image.nextSibling()).toBe(video);
    video.drop(image, ['above', 'center']);
    return expect(video.nextSibling()).toBe(image);
  });
  it('should support being dropped on by Image', function() {
    var image;
    image = new ContentEdit.Image({
      'src': '/bar.jpg'
    });
    region.attach(image, 0);
    expect(image.nextSibling()).toBe(video);
    image.drop(video, ['above', 'left']);
    expect(image.hasCSSClass('align-left')).toBe(true);
    expect(image.nextSibling()).toBe(video);
    image.drop(video, ['above', 'right']);
    expect(image.hasCSSClass('align-left')).toBe(false);
    expect(image.hasCSSClass('align-right')).toBe(true);
    expect(image.nextSibling()).toBe(video);
    image.drop(video, ['below', 'center']);
    expect(image.hasCSSClass('align-left')).toBe(false);
    expect(image.hasCSSClass('align-right')).toBe(false);
    expect(video.nextSibling()).toBe(image);
    image.drop(video, ['above', 'center']);
    return expect(image.nextSibling()).toBe(video);
  });
  it('should support dropping on PreText', function() {
    var preText;
    preText = new ContentEdit.PreText('pre', {}, '');
    region.attach(preText);
    expect(video.nextSibling()).toBe(preText);
    video.drop(preText, ['above', 'left']);
    expect(video.hasCSSClass('align-left')).toBe(true);
    expect(video.nextSibling()).toBe(preText);
    video.drop(preText, ['above', 'right']);
    expect(video.hasCSSClass('align-left')).toBe(false);
    expect(video.hasCSSClass('align-right')).toBe(true);
    expect(video.nextSibling()).toBe(preText);
    video.drop(preText, ['below', 'center']);
    expect(video.hasCSSClass('align-left')).toBe(false);
    expect(video.hasCSSClass('align-right')).toBe(false);
    expect(preText.nextSibling()).toBe(video);
    video.drop(preText, ['above', 'center']);
    return expect(video.nextSibling()).toBe(preText);
  });
  it('should support being dropped on by PreText', function() {
    var preText;
    preText = new ContentEdit.PreText('pre', {}, '');
    region.attach(preText, 0);
    expect(preText.nextSibling()).toBe(video);
    preText.drop(video, ['below', 'center']);
    expect(video.nextSibling()).toBe(preText);
    preText.drop(video, ['above', 'center']);
    return expect(preText.nextSibling()).toBe(video);
  });
  it('should support dropping on Static', function() {
    var staticElm;
    staticElm = ContentEdit.Static.fromDOMElement(document.createElement('div'));
    region.attach(staticElm);
    expect(video.nextSibling()).toBe(staticElm);
    video.drop(staticElm, ['above', 'left']);
    expect(video.hasCSSClass('align-left')).toBe(true);
    expect(video.nextSibling()).toBe(staticElm);
    video.drop(staticElm, ['above', 'right']);
    expect(video.hasCSSClass('align-left')).toBe(false);
    expect(video.hasCSSClass('align-right')).toBe(true);
    expect(video.nextSibling()).toBe(staticElm);
    video.drop(staticElm, ['below', 'center']);
    expect(video.hasCSSClass('align-left')).toBe(false);
    expect(video.hasCSSClass('align-right')).toBe(false);
    expect(staticElm.nextSibling()).toBe(video);
    video.drop(staticElm, ['above', 'center']);
    return expect(video.nextSibling()).toBe(staticElm);
  });
  it('should support being dropped on by `moveable` Static', function() {
    var staticElm;
    staticElm = new ContentEdit.Static('div', {
      'data-ce-moveable': 'data-ce-moveable'
    }, 'foo');
    region.attach(staticElm, 0);
    expect(staticElm.nextSibling()).toBe(video);
    staticElm.drop(video, ['below', 'center']);
    expect(video.nextSibling()).toBe(staticElm);
    staticElm.drop(video, ['above', 'center']);
    return expect(staticElm.nextSibling()).toBe(video);
  });
  it('should support dropping on Text', function() {
    var text;
    text = new ContentEdit.Text('p');
    region.attach(text);
    expect(video.nextSibling()).toBe(text);
    video.drop(text, ['above', 'left']);
    expect(video.hasCSSClass('align-left')).toBe(true);
    expect(video.nextSibling()).toBe(text);
    video.drop(text, ['above', 'right']);
    expect(video.hasCSSClass('align-left')).toBe(false);
    expect(video.hasCSSClass('align-right')).toBe(true);
    expect(video.nextSibling()).toBe(text);
    video.drop(text, ['below', 'center']);
    expect(video.hasCSSClass('align-left')).toBe(false);
    expect(video.hasCSSClass('align-right')).toBe(false);
    expect(text.nextSibling()).toBe(video);
    video.drop(text, ['above', 'center']);
    return expect(video.nextSibling()).toBe(text);
  });
  it('should support being dropped on by Text', function() {
    var text;
    text = new ContentEdit.Text('p');
    region.attach(text, 0);
    expect(text.nextSibling()).toBe(video);
    text.drop(video, ['below', 'center']);
    expect(video.nextSibling()).toBe(text);
    text.drop(video, ['above', 'center']);
    return expect(text.nextSibling()).toBe(video);
  });
  return it('should support dropping on Video', function() {
    var otherVideo;
    otherVideo = new ContentEdit.Video('iframe', {
      'src': '/foo.jpg'
    });
    region.attach(otherVideo);
    expect(video.nextSibling()).toBe(otherVideo);
    video.drop(otherVideo, ['above', 'left']);
    expect(video.hasCSSClass('align-left')).toBe(true);
    expect(video.nextSibling()).toBe(otherVideo);
    video.drop(otherVideo, ['above', 'right']);
    expect(video.hasCSSClass('align-left')).toBe(false);
    expect(video.hasCSSClass('align-right')).toBe(true);
    expect(video.nextSibling()).toBe(otherVideo);
    video.drop(otherVideo, ['below', 'center']);
    expect(video.hasCSSClass('align-left')).toBe(false);
    expect(video.hasCSSClass('align-right')).toBe(false);
    expect(otherVideo.nextSibling()).toBe(video);
    video.drop(otherVideo, ['above', 'center']);
    return expect(video.nextSibling()).toBe(otherVideo);
  });
});
