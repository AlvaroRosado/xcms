// Generated by CoffeeScript 1.10.0
describe('`ContentEdit.Table()`', function() {
  return it('should return an instance of Table`', function() {
    var table;
    table = new ContentEdit.Table();
    return expect(table instanceof ContentEdit.Table).toBe(true);
  });
});

describe('`ContentEdit.Table.cssTypeName()`', function() {
  return it('should return \'table\'', function() {
    var table;
    table = new ContentEdit.Table();
    return expect(table.cssTypeName()).toBe('table');
  });
});

describe('`ContentEdit.Table.type()`', function() {
  return it('should return \'Table\'', function() {
    var table;
    table = new ContentEdit.Table();
    return expect(table.type()).toBe('Table');
  });
});

describe('`ContentEdit.Table.typeName()`', function() {
  return it('should return \'table\'', function() {
    var table;
    table = new ContentEdit.Table();
    return expect(table.typeName()).toBe('Table');
  });
});

describe('`ContentEdit.Table.firstSection()`', function() {
  return it('should return the first section in the table (their position as children is irrelevant, the order is thead, tbody, tfoot in that order ', function() {
    var table, tbody, tfoot, thead;
    table = new ContentEdit.Table();
    thead = new ContentEdit.TableSection('thead');
    tbody = new ContentEdit.TableSection('tbody');
    tfoot = new ContentEdit.TableSection('tfoot');
    expect(table.firstSection()).toBe(null);
    table.attach(tfoot);
    expect(table.firstSection()).toBe(tfoot);
    table.attach(tbody);
    expect(table.firstSection()).toBe(tbody);
    table.attach(thead);
    return expect(table.firstSection()).toBe(thead);
  });
});

describe('`ContentEdit.Table.lastSection()`', function() {
  return it('should return the last section in the table (their position as children is irrelevant, the order is thead, tbody, tfoot in that order ', function() {
    var table, tbody, tfoot, thead;
    table = new ContentEdit.Table();
    thead = new ContentEdit.TableSection('thead');
    tbody = new ContentEdit.TableSection('tbody');
    tfoot = new ContentEdit.TableSection('tfoot');
    expect(table.lastSection()).toBe(null);
    table.attach(thead);
    expect(table.lastSection()).toBe(thead);
    table.attach(tbody);
    expect(table.lastSection()).toBe(tbody);
    table.attach(tfoot);
    return expect(table.lastSection()).toBe(tfoot);
  });
});

describe('`ContentEdit.Table.thead()`', function() {
  return it('should return the `TableSection` (thead) for the `Table` if there is one', function() {
    var table, tableHead;
    table = new ContentEdit.Table();
    expect(table.thead()).toBe(null);
    tableHead = new ContentEdit.TableSection('thead');
    table.attach(tableHead);
    return expect(table.thead()).toBe(tableHead);
  });
});

describe('`ContentEdit.Table.tbody()`', function() {
  return it('should return the `TableSection` (tbody) for the `Table` if there is one', function() {
    var table, tableBody;
    table = new ContentEdit.Table();
    expect(table.tbody()).toBe(null);
    tableBody = new ContentEdit.TableSection('tbody');
    table.attach(tableBody);
    return expect(table.tbody()).toBe(tableBody);
  });
});

describe('`ContentEdit.Table.tfoot()`', function() {
  return it('should return the `TableSection` (tfoot) for the `Table` if there is one', function() {
    var table, tableFoot;
    table = new ContentEdit.Table();
    expect(table.tfoot()).toBe(null);
    tableFoot = new ContentEdit.TableSection('tfoot');
    table.attach(tableFoot);
    return expect(table.tfoot()).toBe(tableFoot);
  });
});

describe('`ContentEdit.Table.fromDOMElement()`', function() {
  return it('should convert a <table> DOM element into a table element', function() {
    var I, domTable, table;
    I = ContentEdit.INDENT;
    domTable = document.createElement('table');
    domTable.innerHTML = '<tbody>\n    <tr>\n        <td>bar</td>\n        <td>zee</td>\n    </tr>\n</tbody>';
    table = ContentEdit.Table.fromDOMElement(domTable);
    expect(table.html()).toBe("<table>\n" + I + "<tbody>\n" + I + I + "<tr>\n" + I + I + I + "<td>\n" + I + I + I + I + "bar\n" + I + I + I + "</td>\n" + I + I + I + "<td>\n" + I + I + I + I + "zee\n" + I + I + I + "</td>\n" + I + I + "</tr>\n" + I + "</tbody>\n</table>");
    domTable = document.createElement('table');
    domTable.innerHTML = '<tr>\n    <td>bar</td>\n    <td>zee</td>\n</tr>';
    table = ContentEdit.Table.fromDOMElement(domTable);
    return expect(table.html()).toBe("<table>\n" + I + "<tbody>\n" + I + I + "<tr>\n" + I + I + I + "<td>\n" + I + I + I + I + "bar\n" + I + I + I + "</td>\n" + I + I + I + "<td>\n" + I + I + I + I + "zee\n" + I + I + I + "</td>\n" + I + I + "</tr>\n" + I + "</tbody>\n</table>");
  });
});

describe('`ContentEdit.Table` drop interactions`', function() {
  var region, table;
  table = null;
  region = null;
  beforeEach(function() {
    region = new ContentEdit.Region(document.createElement('div'));
    table = new ContentEdit.Table();
    return region.attach(table);
  });
  it('should support dropping on Image', function() {
    var image;
    image = new ContentEdit.Image({
      'src': '/bar.jpg'
    });
    region.attach(image);
    expect(table.nextSibling()).toBe(image);
    table.drop(image, ['below', 'center']);
    expect(image.nextSibling()).toBe(table);
    table.drop(image, ['above', 'center']);
    return expect(table.nextSibling()).toBe(image);
  });
  it('should support being dropped on by Image', function() {
    var image;
    image = new ContentEdit.Image({
      'src': '/bar.jpg'
    });
    region.attach(image, 0);
    expect(image.nextSibling()).toBe(table);
    image.drop(table, ['above', 'left']);
    expect(image.hasCSSClass('align-left')).toBe(true);
    expect(image.nextSibling()).toBe(table);
    image.drop(table, ['above', 'right']);
    expect(image.hasCSSClass('align-left')).toBe(false);
    expect(image.hasCSSClass('align-right')).toBe(true);
    expect(image.nextSibling()).toBe(table);
    image.drop(table, ['below', 'center']);
    expect(image.hasCSSClass('align-left')).toBe(false);
    expect(image.hasCSSClass('align-right')).toBe(false);
    expect(table.nextSibling()).toBe(image);
    image.drop(table, ['above', 'center']);
    return expect(image.nextSibling()).toBe(table);
  });
  it('should support dropping on List', function() {
    var list;
    list = new ContentEdit.Image({
      'src': '/bar.jpg'
    });
    region.attach(list);
    expect(table.nextSibling()).toBe(list);
    table.drop(list, ['below', 'center']);
    expect(list.nextSibling()).toBe(table);
    table.drop(list, ['above', 'center']);
    return expect(table.nextSibling()).toBe(list);
  });
  it('should support being dropped on by List', function() {
    var list;
    list = new ContentEdit.Text('p');
    region.attach(list, 0);
    expect(list.nextSibling()).toBe(table);
    list.drop(table, ['below', 'center']);
    expect(table.nextSibling()).toBe(list);
    list.drop(table, ['above', 'center']);
    return expect(list.nextSibling()).toBe(table);
  });
  it('should support dropping on PreText', function() {
    var preText;
    preText = new ContentEdit.PreText('pre', {}, '');
    region.attach(preText);
    expect(table.nextSibling()).toBe(preText);
    table.drop(preText, ['below', 'center']);
    expect(preText.nextSibling()).toBe(table);
    table.drop(preText, ['above', 'center']);
    return expect(table.nextSibling()).toBe(preText);
  });
  it('should support being dropped on by PreText', function() {
    var preText;
    preText = new ContentEdit.PreText('pre', {}, '');
    region.attach(preText, 0);
    expect(preText.nextSibling()).toBe(table);
    preText.drop(table, ['below', 'center']);
    expect(table.nextSibling()).toBe(preText);
    preText.drop(table, ['above', 'center']);
    return expect(preText.nextSibling()).toBe(table);
  });
  it('should support dropping on Static', function() {
    var staticElm;
    staticElm = ContentEdit.Static.fromDOMElement(document.createElement('div'));
    region.attach(staticElm);
    expect(table.nextSibling()).toBe(staticElm);
    table.drop(staticElm, ['below', 'center']);
    expect(staticElm.nextSibling()).toBe(table);
    table.drop(staticElm, ['above', 'center']);
    return expect(table.nextSibling()).toBe(staticElm);
  });
  it('should support being dropped on by `moveable` Static', function() {
    var staticElm;
    staticElm = new ContentEdit.Static('div', {
      'data-ce-moveable': 'data-ce-moveable'
    }, 'foo');
    region.attach(staticElm, 0);
    expect(staticElm.nextSibling()).toBe(table);
    staticElm.drop(table, ['below', 'center']);
    expect(table.nextSibling()).toBe(staticElm);
    staticElm.drop(table, ['above', 'center']);
    return expect(staticElm.nextSibling()).toBe(table);
  });
  it('should support dropping on Table', function() {
    var otherTable;
    otherTable = new ContentEdit.Table();
    region.attach(otherTable);
    expect(table.nextSibling()).toBe(otherTable);
    table.drop(otherTable, ['below', 'center']);
    expect(otherTable.nextSibling()).toBe(table);
    table.drop(otherTable, ['above', 'center']);
    return expect(table.nextSibling()).toBe(otherTable);
  });
  it('should support dropping on Text', function() {
    var text;
    text = new ContentEdit.Text('p');
    region.attach(text);
    expect(table.nextSibling()).toBe(text);
    table.drop(text, ['below', 'center']);
    expect(text.nextSibling()).toBe(table);
    table.drop(text, ['above', 'center']);
    return expect(table.nextSibling()).toBe(text);
  });
  it('should support being dropped on by Text', function() {
    var text;
    text = new ContentEdit.Text('p');
    region.attach(text, 0);
    expect(text.nextSibling()).toBe(table);
    text.drop(table, ['below', 'center']);
    expect(table.nextSibling()).toBe(text);
    text.drop(table, ['above', 'center']);
    return expect(text.nextSibling()).toBe(table);
  });
  it('should support dropping on Video', function() {
    var video;
    video = new ContentEdit.Video('iframe', {
      'src': '/foo.jpg'
    });
    region.attach(video);
    expect(table.nextSibling()).toBe(video);
    table.drop(video, ['below', 'center']);
    expect(video.nextSibling()).toBe(table);
    table.drop(video, ['above', 'center']);
    return expect(table.nextSibling()).toBe(video);
  });
  return it('should support being dropped on by Video', function() {
    var video;
    video = new ContentEdit.Video('iframe', {
      'src': '/foo.jpg'
    });
    region.attach(video, 0);
    expect(video.nextSibling()).toBe(table);
    video.drop(table, ['above', 'left']);
    expect(video.hasCSSClass('align-left')).toBe(true);
    expect(video.nextSibling()).toBe(table);
    video.drop(table, ['above', 'right']);
    expect(video.hasCSSClass('align-left')).toBe(false);
    expect(video.hasCSSClass('align-right')).toBe(true);
    expect(video.nextSibling()).toBe(table);
    video.drop(table, ['below', 'center']);
    expect(video.hasCSSClass('align-left')).toBe(false);
    expect(video.hasCSSClass('align-right')).toBe(false);
    expect(table.nextSibling()).toBe(video);
    video.drop(table, ['above', 'center']);
    return expect(video.nextSibling()).toBe(table);
  });
});

describe('`ContentEdit.TableSection()`', function() {
  return it('should return an instance of TableSection`', function() {
    var tableSection;
    tableSection = new ContentEdit.TableSection('tbody', {});
    return expect(tableSection instanceof ContentEdit.TableSection).toBe(true);
  });
});

describe('`ContentEdit.TableSection.cssTypeName()`', function() {
  return it('should return \'table-section\'', function() {
    var tableSection;
    tableSection = new ContentEdit.TableSection('tbody', {});
    return expect(tableSection.cssTypeName()).toBe('table-section');
  });
});

describe('`ContentEdit.TableSection.type()`', function() {
  return it('should return \'TableSection\'', function() {
    var tableSection;
    tableSection = new ContentEdit.TableSection('tbody', {});
    return expect(tableSection.type()).toBe('TableSection');
  });
});

describe('`ContentEdit.TableSection.fromDOMElement()`', function() {
  return it('should convert a <tbody>, <tfoot> or <thead> DOM element into a table section element', function() {
    var I, domTableSection, i, len, ref, results, sectionName, tableSection;
    I = ContentEdit.INDENT;
    ref = ['tbody', 'tfoot', 'thead'];
    results = [];
    for (i = 0, len = ref.length; i < len; i++) {
      sectionName = ref[i];
      domTableSection = document.createElement(sectionName);
      domTableSection.innerHTML = '<tr>\n    <td>foo</td>\n    <td>bar</td>\n</tr>';
      tableSection = ContentEdit.TableSection.fromDOMElement(domTableSection);
      results.push(expect(tableSection.html()).toBe("<" + sectionName + ">\n" + I + "<tr>\n" + I + I + "<td>\n" + I + I + I + "foo\n" + I + I + "</td>\n" + I + I + "<td>\n" + I + I + I + "bar\n" + I + I + "</td>\n" + I + "</tr>\n</" + sectionName + ">"));
    }
    return results;
  });
});

describe('`ContentEdit.TableRow()`', function() {
  return it('should return an instance of TableRow`', function() {
    var tableRow;
    tableRow = new ContentEdit.TableRow();
    return expect(tableRow instanceof ContentEdit.TableRow).toBe(true);
  });
});

describe('`ContentEdit.TableRow.cssTypeName()`', function() {
  return it('should return \'table-row\'', function() {
    var tableRow;
    tableRow = new ContentEdit.TableRow();
    return expect(tableRow.cssTypeName()).toBe('table-row');
  });
});

describe('`ContentEdit.TableRow.typeName()`', function() {
  return it('should return \'TableRow\'', function() {
    var tableRow;
    tableRow = new ContentEdit.TableRow();
    return expect(tableRow.type()).toBe('TableRow');
  });
});

describe('`ContentEdit.TableRow.typeName()`', function() {
  return it('should return \'Table row\'', function() {
    var tableRow;
    tableRow = new ContentEdit.TableRow();
    return expect(tableRow.typeName()).toBe('Table row');
  });
});

describe('`ContentEdit.TableRow.fromDOMElement()`', function() {
  return it('should convert a <tr> DOM element into a table row element', function() {
    var I, domTableRow, tableRow;
    I = ContentEdit.INDENT;
    domTableRow = document.createElement('tr');
    domTableRow.innerHTML = '<td>foo</td>\n<td>bar</td>';
    tableRow = ContentEdit.TableRow.fromDOMElement(domTableRow);
    return expect(tableRow.html()).toBe("<tr>\n" + I + "<td>\n" + I + I + "foo\n" + I + "</td>\n" + I + "<td>\n" + I + I + "bar\n" + I + "</td>\n</tr>");
  });
});

describe('`ContentEdit.TableRow` drop interactions`', function() {
  var region, table;
  region = null;
  table = null;
  beforeEach(function() {
    var domTable;
    region = new ContentEdit.Region(document.createElement('div'));
    domTable = document.createElement('table');
    domTable.innerHTML = '<tbody>\n    <tr>\n        <td>foo</td>\n    </tr>\n    <tr>\n        <td>bar</td>\n    </tr>\n    <tr>\n        <td>zee</td>\n    </tr>\n    <tr>\n        <td>umm</td>\n    </tr>\n</tbody>';
    table = ContentEdit.Table.fromDOMElement(domTable);
    return region.attach(table);
  });
  return it('should support dropping on TableRow', function() {
    var tableRowA, tableRowB;
    tableRowA = table.tbody().children[1];
    tableRowB = table.tbody().children[2];
    expect(tableRowA.nextSibling()).toBe(tableRowB);
    tableRowA.drop(tableRowB, ['below', 'center']);
    expect(tableRowB.nextSibling()).toBe(tableRowA);
    tableRowA.drop(tableRowB, ['above', 'center']);
    return expect(tableRowA.nextSibling()).toBe(tableRowB);
  });
});

describe('`ContentEdit.TableCell()`', function() {
  return it('should return an instance of `TableCell`', function() {
    var tableCell;
    tableCell = new ContentEdit.TableCell('td', {});
    return expect(tableCell instanceof ContentEdit.TableCell).toBe(true);
  });
});

describe('`ContentEdit.TableCell.cssTypeName()`', function() {
  return it('should return \'table-cell\'', function() {
    var tableCell;
    tableCell = new ContentEdit.TableCell('td', {});
    return expect(tableCell.cssTypeName()).toBe('table-cell');
  });
});

describe('`ContentEdit.TableCell.tableCellText()`', function() {
  return it('should return any associated TableCellText element, or null if there isn\'t one', function() {
    var tableCell, tableCellText;
    tableCell = new ContentEdit.TableCell('td');
    expect(tableCell.tableCellText()).toBe(null);
    tableCellText = new ContentEdit.TableCellText('foo');
    tableCell.attach(tableCellText);
    return expect(tableCell.tableCellText()).toBe(tableCellText);
  });
});

describe('`ContentEdit.TableCell.type()`', function() {
  return it('should return \'table-cell\'', function() {
    var tableCell;
    tableCell = new ContentEdit.TableCell('td', {});
    return expect(tableCell.type()).toBe('TableCell');
  });
});

describe('`ContentEdit.TableCell.html()`', function() {
  return it('should return a HTML string for the table cell element', function() {
    var tableCell, tableCellText;
    tableCell = new ContentEdit.TableCell('td', {
      'class': 'foo'
    });
    tableCellText = new ContentEdit.TableCellText('bar');
    tableCell.attach(tableCellText);
    return expect(tableCell.html()).toBe('<td class="foo">\n' + (ContentEdit.INDENT + "bar\n") + '</td>');
  });
});

describe('`ContentEdit.TableCell.fromDOMElement()`', function() {
  return it('should convert a <td> or <th> DOM element into a table cell element', function() {
    var I, domTableCell, tableCell;
    I = ContentEdit.INDENT;
    domTableCell = document.createElement('td');
    domTableCell.innerHTML = 'foo';
    tableCell = ContentEdit.TableCell.fromDOMElement(domTableCell);
    expect(tableCell.html()).toBe("<td>\n" + I + "foo\n</td>");
    domTableCell = document.createElement('th');
    domTableCell.innerHTML = 'bar';
    tableCell = ContentEdit.TableCell.fromDOMElement(domTableCell);
    return expect(tableCell.html()).toBe("<th>\n" + I + "bar\n</th>");
  });
});

describe('`ContentEdit.TableCellText()`', function() {
  return it('should return an instance of TableCellText', function() {
    var tableCellText;
    tableCellText = new ContentEdit.TableCellText('foo');
    return expect(tableCellText instanceof ContentEdit.TableCellText).toBe(true);
  });
});

describe('`ContentEdit.TableCellText.cssTypeName()`', function() {
  return it('should return \'table-cell-text\'', function() {
    var tableCellText;
    tableCellText = new ContentEdit.TableCellText('foo');
    return expect(tableCellText.cssTypeName()).toBe('table-cell-text');
  });
});

describe('`ContentEdit.TableCellText.type()`', function() {
  return it('should return \'TableCellText\'', function() {
    var tableCellText;
    tableCellText = new ContentEdit.TableCellText('foo');
    return expect(tableCellText.type()).toBe('TableCellText');
  });
});

describe('ContentEdit.TableCellText.blur()', function() {
  var region, root, table, tableCell, tableCellText;
  root = ContentEdit.Root.get();
  region = null;
  table = null;
  tableCell = null;
  tableCellText = null;
  beforeEach(function() {
    var domTable;
    domTable = document.createElement('table');
    domTable.innerHTML = '<tbody>\n    <tr>\n        <td>bar</td>\n        <td>zee</td>\n    </tr>\n</tbody>';
    table = ContentEdit.Table.fromDOMElement(domTable);
    region = new ContentEdit.Region(document.getElementById('test'));
    region.attach(table);
    tableCell = table.tbody().children[0].children[0];
    tableCellText = tableCell.tableCellText();
    return tableCellText.focus();
  });
  afterEach(function() {
    return region.detach(table);
  });
  it('should blur the text element', function() {
    tableCellText.blur();
    return expect(tableCellText.isFocused()).toBe(false);
  });
  it('should not remove the table cell text element if it\'s just whitespace', function() {
    var parent;
    parent = tableCellText.parent();
    tableCellText.content = new HTMLString.String('');
    tableCellText.blur();
    return expect(tableCellText.parent()).toBe(parent);
  });
  return it('should trigger the `blur` event against the root', function() {
    var foo;
    foo = {
      handleFoo: function() {}
    };
    spyOn(foo, 'handleFoo');
    root.bind('blur', foo.handleFoo);
    tableCellText.blur();
    return expect(foo.handleFoo).toHaveBeenCalledWith(tableCellText);
  });
});

describe('ContentEdit.TableCellText.html()', function() {
  return it('should return a HTML string for the table cell text element', function() {
    var tableCellText;
    tableCellText = new ContentEdit.TableCellText('bar <b>zee</b>');
    return expect(tableCellText.html()).toBe('bar <b>zee</b>');
  });
});

describe('`ContentEdit.TableCellText` key events`', function() {
  var INDENT, ev, region, root, table, tbody;
  INDENT = ContentEdit.INDENT;
  ev = {
    preventDefault: function() {}
  };
  root = ContentEdit.Root.get();
  region = null;
  table = null;
  tbody = null;
  beforeEach(function() {
    document.getElementById('test').innerHTML = '<p>foo</p>\n<table>\n    <tbody>\n        <tr>\n            <td>foo</td>\n            <td>bar</td>\n        </tr>\n        <tr>\n            <td>zee</td>\n            <td>umm</td>\n        </tr>\n    </tbody>\n</table>\n<p>bar</p>';
    region = new ContentEdit.Region(document.getElementById('test'));
    table = region.children[1];
    return tbody = table.tbody();
  });
  afterEach(function() {
    var child, i, len, ref, results;
    ref = region.children.slice();
    results = [];
    for (i = 0, len = ref.length; i < len; i++) {
      child = ref[i];
      results.push(region.detach(child));
    }
    return results;
  });
  it('should support down arrow nav to table cell below or next content element if we\'re in the last row', function() {
    var otherTableCellText, tableCellText;
    tableCellText = tbody.children[0].children[0].tableCellText();
    tableCellText.focus();
    new ContentSelect.Range(3, 3).select(tableCellText.domElement());
    tableCellText._keyDown(ev);
    otherTableCellText = tbody.children[1].children[0].tableCellText();
    expect(root.focused()).toBe(otherTableCellText);
    root.focused()._keyDown(ev);
    return expect(root.focused()).toBe(region.children[2]);
  });
  it('should support up arrow nav to table cell below or previous content element if we\'re in the first row', function() {
    var otherTableCellText, tableCellText;
    tableCellText = tbody.children[1].children[0].tableCellText();
    tableCellText.focus();
    new ContentSelect.Range(3, 3).select(tableCellText.domElement());
    tableCellText._keyUp(ev);
    otherTableCellText = tbody.children[0].children[0].tableCellText();
    expect(root.focused()).toBe(otherTableCellText);
    root.focused()._keyUp(ev);
    return expect(root.focused()).toBe(region.children[0]);
  });
  it('should support return nav to next content element', function() {
    var otherTableCellText, tableCellText;
    tableCellText = tbody.children[0].children[0].tableCellText();
    tableCellText.focus();
    new ContentSelect.Range(3, 3).select(tableCellText.domElement());
    tableCellText._keyReturn(ev);
    otherTableCellText = tbody.children[0].children[1].tableCellText();
    return expect(root.focused()).toBe(otherTableCellText);
  });
  it('should support using tab to nav to next table cell', function() {
    var otherTableCellText, tableCellText;
    tableCellText = tbody.children[0].children[0].tableCellText();
    tableCellText.focus();
    new ContentSelect.Range(3, 3).select(tableCellText.domElement());
    tableCellText._keyTab(ev);
    otherTableCellText = tbody.children[0].children[1].tableCellText();
    return expect(root.focused()).toBe(otherTableCellText);
  });
  it('should support tab creating a new body row if last table cell in last row of the table body focused', function() {
    var otherTableCellText, rows, tableCellText;
    rows = tbody.children.length;
    tableCellText = tbody.children[1].children[1].tableCellText();
    tableCellText.focus();
    new ContentSelect.Range(3, 3).select(tableCellText.domElement());
    tableCellText._keyTab(ev);
    expect(tbody.children.length).toBe(rows + 1);
    otherTableCellText = tbody.children[rows].children[0].tableCellText();
    return expect(root.focused()).toBe(otherTableCellText);
  });
  return it('should support using shift-tab to nav to previous table cell', function() {
    var otherTableCellText, tableCellText;
    tableCellText = tbody.children[1].children[0].tableCellText();
    tableCellText.focus();
    new ContentSelect.Range(3, 3).select(tableCellText.domElement());
    ev.shiftKey = true;
    tableCellText._keyTab(ev);
    otherTableCellText = tbody.children[0].children[1].tableCellText();
    return expect(root.focused()).toBe(otherTableCellText);
  });
});
