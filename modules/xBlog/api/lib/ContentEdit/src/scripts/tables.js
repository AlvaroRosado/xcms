// Generated by CoffeeScript 1.10.0
var extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

ContentEdit.Table = (function(superClass) {
  extend(Table, superClass);

  function Table(attributes) {
    Table.__super__.constructor.call(this, 'table', attributes);
  }

  Table.prototype.cssTypeName = function() {
    return 'table';
  };

  Table.prototype.typeName = function() {
    return 'Table';
  };

  Table.prototype.type = function() {
    return 'Table';
  };

  Table.prototype.firstSection = function() {
    var section;
    if (section = this.thead()) {
      return section;
    } else if (section = this.tbody()) {
      return section;
    } else if (section = this.tfoot()) {
      return section;
    }
    return null;
  };

  Table.prototype.lastSection = function() {
    var section;
    if (section = this.tfoot()) {
      return section;
    } else if (section = this.tbody()) {
      return section;
    } else if (section = this.thead()) {
      return section;
    }
    return null;
  };

  Table.prototype.tbody = function() {
    return this._getChild('tbody');
  };

  Table.prototype.tfoot = function() {
    return this._getChild('tfoot');
  };

  Table.prototype.thead = function() {
    return this._getChild('thead');
  };

  Table.prototype._onMouseOver = function(ev) {
    Table.__super__._onMouseOver.call(this, ev);
    return this._removeCSSClass('ce-element--over');
  };

  Table.prototype._getChild = function(tagName) {
    var child, i, len, ref;
    ref = this.children;
    for (i = 0, len = ref.length; i < len; i++) {
      child = ref[i];
      if (child.tagName() === tagName) {
        return child;
      }
    }
    return null;
  };

  Table.droppers = {
    'Image': ContentEdit.Element._dropBoth,
    'List': ContentEdit.Element._dropVert,
    'PreText': ContentEdit.Element._dropVert,
    'Static': ContentEdit.Element._dropVert,
    'Table': ContentEdit.Element._dropVert,
    'Text': ContentEdit.Element._dropVert,
    'Video': ContentEdit.Element._dropBoth
  };

  Table.fromDOMElement = function(domElement) {
    var c, childNode, childNodes, i, j, len, len1, orphanRows, row, section, table, tagName;
    table = new this(this.getDOMElementAttributes(domElement));
    childNodes = (function() {
      var i, len, ref, results;
      ref = domElement.childNodes;
      results = [];
      for (i = 0, len = ref.length; i < len; i++) {
        c = ref[i];
        results.push(c);
      }
      return results;
    })();
    orphanRows = [];
    for (i = 0, len = childNodes.length; i < len; i++) {
      childNode = childNodes[i];
      if (childNode.nodeType !== 1) {
        continue;
      }
      tagName = childNode.tagName.toLowerCase();
      if (table._getChild(tagName)) {
        continue;
      }
      switch (tagName) {
        case 'tbody':
        case 'tfoot':
        case 'thead':
          section = ContentEdit.TableSection.fromDOMElement(childNode);
          table.attach(section);
          break;
        case 'tr':
          orphanRows.push(ContentEdit.TableRow.fromDOMElement(childNode));
      }
    }
    if (orphanRows.length > 0) {
      if (!table._getChild('tbody')) {
        table.attach(new ContentEdit.TableSection('tbody'));
      }
      for (j = 0, len1 = orphanRows.length; j < len1; j++) {
        row = orphanRows[j];
        table.tbody().attach(row);
      }
    }
    if (table.children.length === 0) {
      return null;
    }
    return table;
  };

  return Table;

})(ContentEdit.ElementCollection);

ContentEdit.TagNames.get().register(ContentEdit.Table, 'table');

ContentEdit.TableSection = (function(superClass) {
  extend(TableSection, superClass);

  function TableSection(tagName, attributes) {
    TableSection.__super__.constructor.call(this, tagName, attributes);
  }

  TableSection.prototype.cssTypeName = function() {
    return 'table-section';
  };

  TableSection.prototype.type = function() {
    return 'TableSection';
  };

  TableSection.prototype._onMouseOver = function(ev) {
    TableSection.__super__._onMouseOver.call(this, ev);
    return this._removeCSSClass('ce-element--over');
  };

  TableSection.fromDOMElement = function(domElement) {
    var c, childNode, childNodes, i, len, section;
    section = new this(domElement.tagName, this.getDOMElementAttributes(domElement));
    childNodes = (function() {
      var i, len, ref, results;
      ref = domElement.childNodes;
      results = [];
      for (i = 0, len = ref.length; i < len; i++) {
        c = ref[i];
        results.push(c);
      }
      return results;
    })();
    for (i = 0, len = childNodes.length; i < len; i++) {
      childNode = childNodes[i];
      if (childNode.nodeType !== 1) {
        continue;
      }
      if (childNode.tagName.toLowerCase() !== 'tr') {
        continue;
      }
      section.attach(ContentEdit.TableRow.fromDOMElement(childNode));
    }
    return section;
  };

  return TableSection;

})(ContentEdit.ElementCollection);

ContentEdit.TableRow = (function(superClass) {
  extend(TableRow, superClass);

  function TableRow(attributes) {
    TableRow.__super__.constructor.call(this, 'tr', attributes);
  }

  TableRow.prototype.cssTypeName = function() {
    return 'table-row';
  };

  TableRow.prototype.type = function() {
    return 'TableRow';
  };

  TableRow.prototype.typeName = function() {
    return 'Table row';
  };

  TableRow.prototype._onMouseOver = function(ev) {
    TableRow.__super__._onMouseOver.call(this, ev);
    return this._removeCSSClass('ce-element--over');
  };

  TableRow.droppers = {
    'TableRow': ContentEdit.Element._dropVert
  };

  TableRow.fromDOMElement = function(domElement) {
    var c, childNode, childNodes, i, len, row, tagName;
    row = new this(this.getDOMElementAttributes(domElement));
    childNodes = (function() {
      var i, len, ref, results;
      ref = domElement.childNodes;
      results = [];
      for (i = 0, len = ref.length; i < len; i++) {
        c = ref[i];
        results.push(c);
      }
      return results;
    })();
    for (i = 0, len = childNodes.length; i < len; i++) {
      childNode = childNodes[i];
      if (childNode.nodeType !== 1) {
        continue;
      }
      tagName = childNode.tagName.toLowerCase();
      if (!(tagName === 'td' || tagName === 'th')) {
        continue;
      }
      row.attach(ContentEdit.TableCell.fromDOMElement(childNode));
    }
    return row;
  };

  return TableRow;

})(ContentEdit.ElementCollection);

ContentEdit.TableCell = (function(superClass) {
  extend(TableCell, superClass);

  function TableCell(tagName, attributes) {
    TableCell.__super__.constructor.call(this, tagName, attributes);
  }

  TableCell.prototype.cssTypeName = function() {
    return 'table-cell';
  };

  TableCell.prototype.tableCellText = function() {
    if (this.children.length > 0) {
      return this.children[0];
    }
    return null;
  };

  TableCell.prototype.type = function() {
    return 'TableCell';
  };

  TableCell.prototype.html = function(indent) {
    var lines;
    if (indent == null) {
      indent = '';
    }
    lines = [indent + "<" + (this.tagName()) + (this._attributesToString()) + ">"];
    if (this.tableCellText()) {
      lines.push(this.tableCellText().html(indent + ContentEdit.INDENT));
    }
    lines.push(indent + "</" + (this.tagName()) + ">");
    return lines.join('\n');
  };

  TableCell.prototype._onMouseOver = function(ev) {
    TableCell.__super__._onMouseOver.call(this, ev);
    return this._removeCSSClass('ce-element--over');
  };

  TableCell.prototype._addDOMEventListeners = function() {};

  TableCell.prototype._removeDOMEventListners = function() {};

  TableCell.fromDOMElement = function(domElement) {
    var tableCell, tableCellText;
    tableCell = new this(domElement.tagName, this.getDOMElementAttributes(domElement));
    tableCellText = new ContentEdit.TableCellText(domElement.innerHTML.replace(/^\s+|\s+$/g, ''));
    tableCell.attach(tableCellText);
    return tableCell;
  };

  return TableCell;

})(ContentEdit.ElementCollection);

ContentEdit.TableCellText = (function(superClass) {
  extend(TableCellText, superClass);

  function TableCellText(content) {
    TableCellText.__super__.constructor.call(this, 'div', {}, content);
  }

  TableCellText.prototype.cssTypeName = function() {
    return 'table-cell-text';
  };

  TableCellText.prototype.type = function() {
    return 'TableCellText';
  };

  TableCellText.prototype._isInFirstRow = function() {
    var cell, row, section, table;
    cell = this.parent();
    row = cell.parent();
    section = row.parent();
    table = section.parent();
    if (section !== table.firstSection()) {
      return false;
    }
    return row === section.children[0];
  };

  TableCellText.prototype._isInLastRow = function() {
    var cell, row, section, table;
    cell = this.parent();
    row = cell.parent();
    section = row.parent();
    table = section.parent();
    if (section !== table.lastSection()) {
      return false;
    }
    return row === section.children[section.children.length - 1];
  };

  TableCellText.prototype._isLastInSection = function() {
    var cell, row, section;
    cell = this.parent();
    row = cell.parent();
    section = row.parent();
    if (row !== section.children[section.children.length - 1]) {
      return false;
    }
    return cell === row.children[row.children.length - 1];
  };

  TableCellText.prototype.blur = function() {
    if (this.isMounted()) {
      this._domElement.blur();
      this._domElement.removeAttribute('contenteditable');
    }
    return ContentEdit.Element.prototype.blur.call(this);
  };

  TableCellText.prototype.html = function(indent) {
    var content;
    if (indent == null) {
      indent = '';
    }
    if (!this._lastCached || this._lastCached < this._modified) {
      content = this.content.copy();
      content.optimize();
      this._lastCached = Date.now();
      this._cached = content.html();
    }
    return "" + indent + this._cached;
  };

  TableCellText.prototype._onMouseDown = function(ev) {
    var initDrag;
    ContentEdit.Element.prototype._onMouseDown.call(this, ev);
    initDrag = (function(_this) {
      return function() {
        var cell, table;
        cell = _this.parent();
        if (ContentEdit.Root.get().dragging() === cell.parent()) {
          ContentEdit.Root.get().cancelDragging();
          table = cell.parent().parent().parent();
          return table.drag(ev.pageX, ev.pageY);
        } else {
          cell.parent().drag(ev.pageX, ev.pageY);
          return _this._dragTimeout = setTimeout(initDrag, ContentEdit.DRAG_HOLD_DURATION * 2);
        }
      };
    })(this);
    clearTimeout(this._dragTimeout);
    return this._dragTimeout = setTimeout(initDrag, ContentEdit.DRAG_HOLD_DURATION);
  };

  TableCellText.prototype._keyReturn = function(ev) {
    ev.preventDefault();
    return this._keyTab({
      'shiftKey': false,
      'preventDefault': function() {}
    });
  };

  TableCellText.prototype._keyDown = function(ev) {
    var cell, cellIndex, lastCell, next, nextRow, row;
    ev.preventDefault();
    cell = this.parent();
    if (this._isInLastRow()) {
      row = cell.parent();
      lastCell = row.children[row.children.length - 1].tableCellText();
      next = lastCell.nextContent();
      if (next) {
        return next.focus();
      } else {
        return ContentEdit.Root.get().trigger('next-region', this.closest(function(node) {
          return node.type() === 'Region';
        }));
      }
    } else {
      nextRow = cell.parent().nextWithTest(function(node) {
        return node.type() === 'TableRow';
      });
      cellIndex = cell.parent().children.indexOf(cell);
      cellIndex = Math.min(cellIndex, nextRow.children.length);
      return nextRow.children[cellIndex].tableCellText().focus();
    }
  };

  TableCellText.prototype._keyTab = function(ev) {
    var cell, child, grandParent, i, len, newCell, newCellText, ref, row, section;
    ev.preventDefault();
    cell = this.parent();
    if (ev.shiftKey) {
      if (this._isInFirstRow() && cell.parent().children[0] === cell) {
        return;
      }
      return this.previousContent().focus();
    } else {
      grandParent = cell.parent().parent();
      if (grandParent.tagName() === 'tbody' && this._isLastInSection()) {
        row = new ContentEdit.TableRow();
        ref = cell.parent().children;
        for (i = 0, len = ref.length; i < len; i++) {
          child = ref[i];
          newCell = new ContentEdit.TableCell(child.tagName(), child._attributes);
          newCellText = new ContentEdit.TableCellText('');
          newCell.attach(newCellText);
          row.attach(newCell);
        }
        section = this.closest(function(node) {
          return node.type() === 'TableSection';
        });
        section.attach(row);
        return row.children[0].tableCellText().focus();
      } else {
        return this.nextContent().focus();
      }
    }
  };

  TableCellText.prototype._keyUp = function(ev) {
    var cell, cellIndex, previous, previousRow, row;
    ev.preventDefault();
    cell = this.parent();
    if (this._isInFirstRow()) {
      row = cell.parent();
      previous = row.children[0].previousContent();
      if (previous) {
        return previous.focus();
      } else {
        return ContentEdit.Root.get().trigger('previous-region', this.closest(function(node) {
          return node === 'Region';
        }));
      }
    } else {
      previousRow = cell.parent().previousWithTest(function(node) {
        return node.type() === 'TableRow';
      });
      cellIndex = cell.parent().children.indexOf(cell);
      cellIndex = Math.min(cellIndex, previousRow.children.length);
      return previousRow.children[cellIndex].tableCellText().focus();
    }
  };

  TableCellText.droppers = {};

  TableCellText.mergers = {};

  return TableCellText;

})(ContentEdit.Text);
