// Generated by CoffeeScript 1.10.0
var _Root,
  bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty,
  indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

_Root = (function(superClass) {
  extend(_Root, superClass);

  function _Root() {
    this._onStopResizing = bind(this._onStopResizing, this);
    this._onResize = bind(this._onResize, this);
    this._onStopDragging = bind(this._onStopDragging, this);
    this._onDrag = bind(this._onDrag, this);
    _Root.__super__.constructor.call(this);
    this._focused = null;
    this._dragging = null;
    this._dropTarget = null;
    this._draggingDOMElement = null;
    this._resizing = null;
    this._resizingInit = null;
  }

  _Root.prototype.dragging = function() {
    return this._dragging;
  };

  _Root.prototype.dropTarget = function() {
    return this._dropTarget;
  };

  _Root.prototype.focused = function() {
    return this._focused;
  };

  _Root.prototype.resizing = function() {
    return this._resizing;
  };

  _Root.prototype.type = function() {
    return 'Root';
  };

  _Root.prototype.cancelDragging = function() {
    if (!this._dragging) {
      return;
    }
    document.body.removeChild(this._draggingDOMElement);
    document.removeEventListener('mousemove', this._onDrag);
    document.removeEventListener('mouseup', this._onStopDragging);
    this._dragging._removeCSSClass('ce-element--dragging');
    this._dragging = null;
    this._dropTarget = null;
    return ContentEdit.removeCSSClass(document.body, 'ce--dragging');
  };

  _Root.prototype.startDragging = function(element, x, y) {
    if (this._dragging) {
      return;
    }
    this._dragging = element;
    this._dragging._addCSSClass('ce-element--dragging');
    this._draggingDOMElement = this._dragging.createDraggingDOMElement();
    document.body.appendChild(this._draggingDOMElement);
    this._draggingDOMElement.style.left = x + "px";
    this._draggingDOMElement.style.top = y + "px";
    document.addEventListener('mousemove', this._onDrag);
    document.addEventListener('mouseup', this._onStopDragging);
    return ContentEdit.addCSSClass(document.body, 'ce--dragging');
  };

  _Root.prototype._getDropPlacement = function(x, y) {
    var horz, rect, ref, vert;
    if (!this._dropTarget) {
      return null;
    }
    rect = this._dropTarget.domElement().getBoundingClientRect();
    ref = [x - rect.left, y - rect.top], x = ref[0], y = ref[1];
    horz = 'center';
    if (x < ContentEdit.DROP_EDGE_SIZE) {
      horz = 'left';
    } else if (x > rect.width - ContentEdit.DROP_EDGE_SIZE) {
      horz = 'right';
    }
    vert = 'above';
    if (y > rect.height / 2) {
      vert = 'below';
    }
    return [vert, horz];
  };

  _Root.prototype._onDrag = function(ev) {
    var placement, ref, ref1;
    ContentSelect.Range.unselectAll();
    this._draggingDOMElement.style.left = ev.pageX + "px";
    this._draggingDOMElement.style.top = ev.pageY + "px";
    if (this._dropTarget) {
      placement = this._getDropPlacement(ev.clientX, ev.clientY);
      this._dropTarget._removeCSSClass('ce-element--drop-above');
      this._dropTarget._removeCSSClass('ce-element--drop-below');
      this._dropTarget._removeCSSClass('ce-element--drop-center');
      this._dropTarget._removeCSSClass('ce-element--drop-left');
      this._dropTarget._removeCSSClass('ce-element--drop-right');
      if (ref = placement[0], indexOf.call(this._dragging.constructor.placements, ref) >= 0) {
        this._dropTarget._addCSSClass("ce-element--drop-" + placement[0]);
      }
      if (ref1 = placement[1], indexOf.call(this._dragging.constructor.placements, ref1) >= 0) {
        return this._dropTarget._addCSSClass("ce-element--drop-" + placement[1]);
      }
    }
  };

  _Root.prototype._onStopDragging = function(ev) {
    var placement;
    placement = this._getDropPlacement(ev.clientX, ev.clientY);
    this._dragging.drop(this._dropTarget, placement);
    return this.cancelDragging();
  };

  _Root.prototype.startResizing = function(element, corner, x, y, fixed) {
    var measureDom, parentDom;
    if (this._resizing) {
      return;
    }
    this._resizing = element;
    this._resizingInit = {
      corner: corner,
      fixed: fixed,
      origin: [x, y],
      size: element.size()
    };
    this._resizing._addCSSClass('ce-element--resizing');
    parentDom = this._resizing.parent().domElement();
    measureDom = document.createElement('div');
    measureDom.setAttribute('class', 'ce-measure');
    parentDom.appendChild(measureDom);
    this._resizingParentWidth = measureDom.getBoundingClientRect().width;
    parentDom.removeChild(measureDom);
    document.addEventListener('mousemove', this._onResize);
    document.addEventListener('mouseup', this._onStopResizing);
    return ContentEdit.addCSSClass(document.body, 'ce--resizing');
  };

  _Root.prototype._onResize = function(ev) {
    var height, width, x, y;
    ContentSelect.Range.unselectAll();
    x = this._resizingInit.origin[0] - ev.clientX;
    if (this._resizingInit.corner[1] === 'right') {
      x = -x;
    }
    width = this._resizingInit.size[0] + x;
    width = Math.min(width, this._resizingParentWidth);
    if (this._resizingInit.fixed) {
      height = width * this._resizing.aspectRatio();
    } else {
      y = this._resizingInit.origin[1] - ev.clientY;
      if (this._resizingInit.corner[0] === 'bottom') {
        y = -y;
      }
      height = this._resizingInit.size[1] + y;
    }
    return this._resizing.size([width, height]);
  };

  _Root.prototype._onStopResizing = function(ev) {
    document.removeEventListener('mousemove', this._onResize);
    document.removeEventListener('mouseup', this._onStopResizing);
    this._resizing._removeCSSClass('ce-element--resizing');
    this._resizing = null;
    this._resizingInit = null;
    this._resizingParentWidth = null;
    return ContentEdit.removeCSSClass(document.body, 'ce--resizing');
  };

  return _Root;

})(ContentEdit.Node);

ContentEdit.Root = (function() {
  var instance;

  function Root() {}

  instance = null;

  Root.get = function() {
    return instance != null ? instance : instance = new _Root();
  };

  return Root;

})();
