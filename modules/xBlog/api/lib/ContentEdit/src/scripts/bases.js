// Generated by CoffeeScript 1.10.0
var slice = [].slice,
  indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; },
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

ContentEdit.Node = (function() {
  function Node() {
    this._bindings = {};
    this._parent = null;
    this._modified = null;
  }

  Node.prototype.lastModified = function() {
    return this._modified;
  };

  Node.prototype.parent = function() {
    return this._parent;
  };

  Node.prototype.parents = function() {
    var parent, parents;
    parents = [];
    parent = this._parent;
    while (parent) {
      parents.push(parent);
      parent = parent._parent;
    }
    return parents;
  };

  Node.prototype.type = function() {
    return 'Node';
  };

  Node.prototype.html = function(indent) {
    if (indent == null) {
      indent = '';
    }
    throw new Error('`html` not implemented');
  };

  Node.prototype.bind = function(eventName, callback) {
    if (this._bindings[eventName] === void 0) {
      this._bindings[eventName] = [];
    }
    this._bindings[eventName].push(callback);
    return callback;
  };

  Node.prototype.trigger = function() {
    var args, callback, eventName, j, len, ref, results;
    eventName = arguments[0], args = 2 <= arguments.length ? slice.call(arguments, 1) : [];
    if (!this._bindings[eventName]) {
      return;
    }
    ref = this._bindings[eventName];
    results = [];
    for (j = 0, len = ref.length; j < len; j++) {
      callback = ref[j];
      if (!callback) {
        continue;
      }
      results.push(callback.call.apply(callback, [this].concat(slice.call(args))));
    }
    return results;
  };

  Node.prototype.unbind = function(eventName, callback) {
    var i, j, len, ref, results, suspect;
    if (!eventName) {
      this._bindings = {};
      return;
    }
    if (!callback) {
      this._bindings[eventName] = void 0;
      return;
    }
    if (!this._bindings[eventName]) {
      return;
    }
    ref = this._bindings[eventName];
    results = [];
    for (i = j = 0, len = ref.length; j < len; i = ++j) {
      suspect = ref[i];
      if (suspect === callback) {
        results.push(this._bindings[eventName].splice(i, 1));
      } else {
        results.push(void 0);
      }
    }
    return results;
  };

  Node.prototype.commit = function() {
    this._modified = null;
    return ContentEdit.Root.get().trigger('commit', this);
  };

  Node.prototype.taint = function() {
    var j, len, now, parent, ref, root;
    now = Date.now();
    this._modified = now;
    ref = this.parents();
    for (j = 0, len = ref.length; j < len; j++) {
      parent = ref[j];
      parent._modified = now;
    }
    root = ContentEdit.Root.get();
    root._modified = now;
    return root.trigger('taint', this);
  };

  Node.prototype.closest = function(testFunc) {
    var parent;
    parent = this.parent();
    while (parent && !testFunc(parent)) {
      if (parent.parent) {
        parent = parent.parent();
      } else {
        parent = null;
      }
    }
    return parent;
  };

  Node.prototype.next = function() {
    var children, index, j, len, node, ref;
    if (this.children && this.children.length > 0) {
      return this.children[0];
    }
    ref = [this].concat(this.parents());
    for (j = 0, len = ref.length; j < len; j++) {
      node = ref[j];
      if (!node.parent()) {
        return null;
      }
      children = node.parent().children;
      index = children.indexOf(node);
      if (index < children.length - 1) {
        return children[index + 1];
      }
    }
  };

  Node.prototype.nextContent = function() {
    return this.nextWithTest(function(node) {
      return node.content !== void 0;
    });
  };

  Node.prototype.nextSibling = function() {
    var index;
    index = this.parent().children.indexOf(this);
    if (index === this.parent().children.length - 1) {
      return null;
    }
    return this.parent().children[index + 1];
  };

  Node.prototype.nextWithTest = function(testFunc) {
    var node;
    node = this;
    while (node) {
      node = node.next();
      if (node && testFunc(node)) {
        return node;
      }
    }
  };

  Node.prototype.previous = function() {
    var children, node;
    if (!this.parent()) {
      return null;
    }
    children = this.parent().children;
    if (children[0] === this) {
      return this.parent();
    }
    node = children[children.indexOf(this) - 1];
    while (node.children && node.children.length) {
      node = node.children[node.children.length - 1];
    }
    return node;
  };

  Node.prototype.previousContent = function() {
    var node;
    return node = this.previousWithTest(function(node) {
      return node.content !== void 0;
    });
  };

  Node.prototype.previousSibling = function() {
    var index;
    index = this.parent().children.indexOf(this);
    if (index === 0) {
      return null;
    }
    return this.parent().children[index - 1];
  };

  Node.prototype.previousWithTest = function(testFunc) {
    var node;
    node = this;
    while (node) {
      node = node.previous();
      if (node && testFunc(node)) {
        return node;
      }
    }
  };

  Node.extend = function(cls) {
    var key, ref, value;
    ref = cls.prototype;
    for (key in ref) {
      value = ref[key];
      if (key === 'constructor') {
        continue;
      }
      this.prototype[key] = value;
    }
    for (key in cls) {
      value = cls[key];
      if (indexOf.call('__super__', key) >= 0) {
        continue;
      }
      this.prototype[key] = value;
    }
    return this;
  };

  Node.fromDOMElement = function(domElement) {
    throw new Error('`fromDOMElement` not implemented');
  };

  return Node;

})();

ContentEdit.NodeCollection = (function(superClass) {
  extend(NodeCollection, superClass);

  function NodeCollection() {
    NodeCollection.__super__.constructor.call(this);
    this.children = [];
  }

  NodeCollection.prototype.descendants = function() {
    var descendants, node, nodeStack;
    descendants = [];
    nodeStack = this.children.slice();
    while (nodeStack.length > 0) {
      node = nodeStack.shift();
      descendants.push(node);
      if (node.children && node.children.length > 0) {
        nodeStack = node.children.slice().concat(nodeStack);
      }
    }
    return descendants;
  };

  NodeCollection.prototype.isMounted = function() {
    return false;
  };

  NodeCollection.prototype.type = function() {
    return 'NodeCollection';
  };

  NodeCollection.prototype.attach = function(node, index) {
    if (node.parent()) {
      node.parent().detach(node);
    }
    node._parent = this;
    if (index !== void 0) {
      this.children.splice(index, 0, node);
    } else {
      this.children.push(node);
    }
    if (node.mount && this.isMounted()) {
      node.mount();
    }
    this.taint();
    return ContentEdit.Root.get().trigger('attach', this, node);
  };

  NodeCollection.prototype.commit = function() {
    var descendant, j, len, ref;
    ref = this.descendants();
    for (j = 0, len = ref.length; j < len; j++) {
      descendant = ref[j];
      descendant._modified = null;
    }
    this._modified = null;
    return ContentEdit.Root.get().trigger('commit', this);
  };

  NodeCollection.prototype.detach = function(node) {
    var nodeIndex;
    nodeIndex = this.children.indexOf(node);
    if (nodeIndex === -1) {
      return;
    }
    if (node.unmount && this.isMounted() && node.isMounted()) {
      node.unmount();
    }
    this.children.splice(nodeIndex, 1);
    node._parent = null;
    this.taint();
    return ContentEdit.Root.get().trigger('detach', this, node);
  };

  return NodeCollection;

})(ContentEdit.Node);

ContentEdit.Element = (function(superClass) {
  extend(Element, superClass);

  function Element(tagName, attributes) {
    Element.__super__.constructor.call(this);
    this._tagName = tagName.toLowerCase();
    this._attributes = attributes ? attributes : {};
    this._domElement = null;
  }

  Element.prototype.attributes = function() {
    var attributes, name, ref, value;
    attributes = {};
    ref = this._attributes;
    for (name in ref) {
      value = ref[name];
      attributes[name] = value;
    }
    return attributes;
  };

  Element.prototype.cssTypeName = function() {
    return 'element';
  };

  Element.prototype.domElement = function() {
    return this._domElement;
  };

  Element.prototype.isFocused = function() {
    return ContentEdit.Root.get().focused() === this;
  };

  Element.prototype.isMounted = function() {
    return this._domElement !== null;
  };

  Element.prototype.type = function() {
    return 'Element';
  };

  Element.prototype.typeName = function() {
    return 'Element';
  };

  Element.prototype.addCSSClass = function(className) {
    var modified;
    modified = false;
    if (!this.hasCSSClass(className)) {
      modified = true;
      if (this.attr('class')) {
        this.attr('class', (this.attr('class')) + " " + className);
      } else {
        this.attr('class', className);
      }
    }
    this._addCSSClass(className);
    if (modified) {
      return this.taint();
    }
  };

  Element.prototype.attr = function(name, value) {
    name = name.toLowerCase();
    if (value === void 0) {
      return this._attributes[name];
    }
    this._attributes[name] = value;
    if (this.isMounted() && name.toLowerCase() !== 'class') {
      this._domElement.setAttribute(name, value);
    }
    return this.taint();
  };

  Element.prototype.blur = function() {
    var root;
    root = ContentEdit.Root.get();
    if (this.isFocused()) {
      this._removeCSSClass('ce-element--focused');
      root._focused = null;
      return root.trigger('blur', this);
    }
  };

  Element.prototype.createDraggingDOMElement = function() {
    var helper;
    if (!this.isMounted()) {
      return;
    }
    helper = document.createElement('div');
    helper.setAttribute('class', "ce-drag-helper ce-drag-helper--type-" + (this.cssTypeName()));
    helper.setAttribute('data-ce-type', ContentEdit._(this.typeName()));
    return helper;
  };

  Element.prototype.drag = function(x, y) {
    var root;
    if (!this.isMounted()) {
      return;
    }
    root = ContentEdit.Root.get();
    root.startDragging(this, x, y);
    return root.trigger('drag', this);
  };

  Element.prototype.drop = function(element, placement) {
    var root;
    root = ContentEdit.Root.get();
    if (element) {
      element._removeCSSClass('ce-element--drop');
      element._removeCSSClass("ce-element--drop-" + placement[0]);
      element._removeCSSClass("ce-element--drop-" + placement[1]);
      if (this.constructor.droppers[element.type()]) {
        this.constructor.droppers[element.type()](this, element, placement);
        root.trigger('drop', this, element, placement);
        return;
      } else if (element.constructor.droppers[this.type()]) {
        element.constructor.droppers[this.type()](this, element, placement);
        root.trigger('drop', this, element, placement);
        return;
      }
    }
    return root.trigger('drop', this, null, null);
  };

  Element.prototype.focus = function(supressDOMFocus) {
    var root;
    root = ContentEdit.Root.get();
    if (this.isFocused()) {
      return;
    }
    if (root.focused()) {
      root.focused().blur();
    }
    this._addCSSClass('ce-element--focused');
    root._focused = this;
    if (this.isMounted() && !supressDOMFocus) {
      this.domElement().focus();
    }
    return root.trigger('focus', this);
  };

  Element.prototype.hasCSSClass = function(className) {
    var c, classNames;
    if (this.attr('class')) {
      classNames = (function() {
        var j, len, ref, results;
        ref = this.attr('class').split(' ');
        results = [];
        for (j = 0, len = ref.length; j < len; j++) {
          c = ref[j];
          results.push(c);
        }
        return results;
      }).call(this);
      if (classNames.indexOf(className) > -1) {
        return true;
      }
    }
    return false;
  };

  Element.prototype.merge = function(element) {
    if (this.constructor.mergers[element.type()]) {
      return this.constructor.mergers[element.type()](element, this);
    } else if (element.constructor.mergers[this.type()]) {
      return element.constructor.mergers[this.type()](element, this);
    }
  };

  Element.prototype.mount = function() {
    var sibling;
    if (!this._domElement) {
      this._domElement = document.createElement(this.tagName());
    }
    sibling = this.nextSibling();
    if (sibling) {
      this.parent().domElement().insertBefore(this._domElement, sibling.domElement());
    } else {
      this.parent().domElement().appendChild(this._domElement);
    }
    this._addDOMEventListeners();
    this._addCSSClass('ce-element');
    this._addCSSClass("ce-element--type-" + (this.cssTypeName()));
    if (this.isFocused()) {
      this._addCSSClass('ce-element--focused');
    }
    return ContentEdit.Root.get().trigger('mount', this);
  };

  Element.prototype.removeAttr = function(name) {
    name = name.toLowerCase();
    if (!this._attributes[name]) {
      return;
    }
    delete this._attributes[name];
    if (this.isMounted() && name.toLowerCase() !== 'class') {
      this._domElement.removeAttribute(name);
    }
    return this.taint();
  };

  Element.prototype.removeCSSClass = function(className) {
    var c, classNameIndex, classNames;
    if (!this.hasCSSClass(className)) {
      return;
    }
    classNames = (function() {
      var j, len, ref, results;
      ref = this.attr('class').split(' ');
      results = [];
      for (j = 0, len = ref.length; j < len; j++) {
        c = ref[j];
        results.push(c);
      }
      return results;
    }).call(this);
    classNameIndex = classNames.indexOf(className);
    if (classNameIndex > -1) {
      classNames.splice(classNameIndex, 1);
    }
    if (classNames.length) {
      this.attr('class', classNames.join(' '));
    } else {
      this.removeAttr('class');
    }
    this._removeCSSClass(className);
    return this.taint();
  };

  Element.prototype.tagName = function(name) {
    if (name === void 0) {
      return this._tagName;
    }
    this._tagName = name.toLowerCase();
    if (this.isMounted()) {
      this.unmount();
      this.mount();
    }
    return this.taint();
  };

  Element.prototype.unmount = function() {
    this._removeDOMEventListeners();
    if (this._domElement.parentNode) {
      this._domElement.parentNode.removeChild(this._domElement);
    }
    this._domElement = null;
    return ContentEdit.Root.get().trigger('unmount', this);
  };

  Element.prototype._addDOMEventListeners = function() {
    this._domElement.addEventListener('focus', (function(_this) {
      return function(ev) {
        return ev.preventDefault();
      };
    })(this));
    this._domElement.addEventListener('dragstart', (function(_this) {
      return function(ev) {
        return ev.preventDefault();
      };
    })(this));
    this._domElement.addEventListener('keydown', (function(_this) {
      return function(ev) {
        return _this._onKeyDown(ev);
      };
    })(this));
    this._domElement.addEventListener('keyup', (function(_this) {
      return function(ev) {
        return _this._onKeyUp(ev);
      };
    })(this));
    this._domElement.addEventListener('mousedown', (function(_this) {
      return function(ev) {
        if (ev.button === 0) {
          return _this._onMouseDown(ev);
        }
      };
    })(this));
    this._domElement.addEventListener('mousemove', (function(_this) {
      return function(ev) {
        return _this._onMouseMove(ev);
      };
    })(this));
    this._domElement.addEventListener('mouseover', (function(_this) {
      return function(ev) {
        return _this._onMouseOver(ev);
      };
    })(this));
    this._domElement.addEventListener('mouseout', (function(_this) {
      return function(ev) {
        return _this._onMouseOut(ev);
      };
    })(this));
    this._domElement.addEventListener('mouseup', (function(_this) {
      return function(ev) {
        if (ev.button === 0) {
          return _this._onMouseUp(ev);
        }
      };
    })(this));
    this._domElement.addEventListener('paste', (function(_this) {
      return function(ev) {
        return _this._onPaste(ev);
      };
    })(this));
    this._domElement.addEventListener('dragover', (function(_this) {
      return function(ev) {
        return ev.preventDefault();
      };
    })(this));
    return this._domElement.addEventListener('drop', (function(_this) {
      return function(ev) {
        return _this._onNativeDrop(ev);
      };
    })(this));
  };

  Element.prototype._onKeyDown = function(ev) {};

  Element.prototype._onKeyUp = function(ev) {};

  Element.prototype._onMouseDown = function(ev) {
    if (this.focus) {
      return this.focus(true);
    }
  };

  Element.prototype._onMouseMove = function(ev) {
    return this._onOver(ev);
  };

  Element.prototype._onMouseOver = function(ev) {
    return this._onOver(ev);
  };

  Element.prototype._onMouseOut = function(ev) {
    var dragging, root;
    this._removeCSSClass('ce-element--over');
    root = ContentEdit.Root.get();
    dragging = root.dragging();
    if (dragging) {
      this._removeCSSClass('ce-element--drop');
      this._removeCSSClass('ce-element--drop-above');
      this._removeCSSClass('ce-element--drop-below');
      this._removeCSSClass('ce-element--drop-center');
      this._removeCSSClass('ce-element--drop-left');
      this._removeCSSClass('ce-element--drop-right');
      return root._dropTarget = null;
    }
  };

  Element.prototype._onMouseUp = function(ev) {};

  Element.prototype._onNativeDrop = function(ev) {
    ev.preventDefault();
    ev.stopPropagation();
    return ContentEdit.Root.get().trigger('native-drop', this, ev);
  };

  Element.prototype._onPaste = function(ev) {
    ev.preventDefault();
    ev.stopPropagation();
    return ContentEdit.Root.get().trigger('paste', this, ev);
  };

  Element.prototype._onOver = function(ev) {
    var dragging, root;
    this._addCSSClass('ce-element--over');
    root = ContentEdit.Root.get();
    dragging = root.dragging();
    if (!dragging) {
      return;
    }
    if (dragging === this) {
      return;
    }
    if (root._dropTarget) {
      return;
    }
    if (this.constructor.droppers[dragging.type()] || dragging.constructor.droppers[this.type()]) {
      this._addCSSClass('ce-element--drop');
      return root._dropTarget = this;
    }
  };

  Element.prototype._removeDOMEventListeners = function() {};

  Element.prototype._addCSSClass = function(className) {
    if (!this.isMounted()) {
      return;
    }
    return ContentEdit.addCSSClass(this._domElement, className);
  };

  Element.prototype._attributesToString = function() {
    if (!(Object.getOwnPropertyNames(this._attributes).length > 0)) {
      return '';
    }
    return ' ' + ContentEdit.attributesToString(this._attributes);
  };

  Element.prototype._removeCSSClass = function(className) {
    if (!this.isMounted()) {
      return;
    }
    return ContentEdit.removeCSSClass(this._domElement, className);
  };

  Element.droppers = {};

  Element.mergers = {};

  Element.placements = ['above', 'below'];

  Element.getDOMElementAttributes = function(domElement) {
    var attribute, attributes, j, len, ref;
    if (!domElement.hasAttributes()) {
      return {};
    }
    attributes = {};
    ref = domElement.attributes;
    for (j = 0, len = ref.length; j < len; j++) {
      attribute = ref[j];
      attributes[attribute.name.toLowerCase()] = attribute.value;
    }
    return attributes;
  };

  Element._dropVert = function(element, target, placement) {
    var insertIndex;
    element.parent().detach(element);
    insertIndex = target.parent().children.indexOf(target);
    if (placement[0] === 'below') {
      insertIndex += 1;
    }
    return target.parent().attach(element, insertIndex);
  };

  Element._dropBoth = function(element, target, placement) {
    var aClassNames, className, insertIndex, j, len, ref;
    element.parent().detach(element);
    insertIndex = target.parent().children.indexOf(target);
    if (placement[0] === 'below' && placement[1] === 'center') {
      insertIndex += 1;
    }
    if (element.a) {
      element._removeCSSClass('pull-left');
      element._removeCSSClass('pull-right');
      if (element.a['class']) {
        aClassNames = [];
        ref = element.a['class'].split(' ');
        for (j = 0, len = ref.length; j < len; j++) {
          className = ref[j];
          if (className === 'pull-left' || className === 'pull-right') {
            continue;
          }
          aClassNames.push(className);
        }
        if (aClassNames.length) {
          element.a['class'] = aClassNames.join(' ');
        } else {
          delete element.a['class'];
        }
      }
    } else {
      element.removeCSSClass('pull-left');
      element.removeCSSClass('pull-right');
    }
    if (placement[1] === 'left') {
      if (element.a) {
        if (element.a['class']) {
          element.a['class'] += ' pull-left';
        } else {
          element.a['class'] = 'pull-left';
        }
        element._addCSSClass('pull-left');
      } else {
        element.addCSSClass('pull-left');
      }
    }
    if (placement[1] === 'right') {
      if (element.a) {
        if (element.a['class']) {
          element.a['class'] += ' pull-right';
        } else {
          element.a['class'] = 'pull-right';
        }
        element._addCSSClass('pull-right');
      } else {
        element.addCSSClass('pull-right');
      }
    }
    return target.parent().attach(element, insertIndex);
  };

  return Element;

})(ContentEdit.Node);

ContentEdit.ElementCollection = (function(superClass) {
  extend(ElementCollection, superClass);

  ElementCollection.extend(ContentEdit.NodeCollection);

  function ElementCollection(tagName, attributes) {
    ElementCollection.__super__.constructor.call(this, tagName, attributes);
    ContentEdit.NodeCollection.prototype.constructor.call(this);
  }

  ElementCollection.prototype.cssTypeName = function() {
    return 'element-collection';
  };

  ElementCollection.prototype.isMounted = function() {
    return this._domElement !== null;
  };

  ElementCollection.prototype.type = function() {
    return 'ElementCollection';
  };

  ElementCollection.prototype.createDraggingDOMElement = function() {
    var helper, text;
    if (!this.isMounted()) {
      return;
    }
    helper = ElementCollection.__super__.createDraggingDOMElement.call(this);
    text = this._domElement.textContent;
    if (text.length > ContentEdit.HELPER_CHAR_LIMIT) {
      text = text.substr(0, ContentEdit.HELPER_CHAR_LIMIT);
    }
    helper.innerHTML = text;
    return helper;
  };

  ElementCollection.prototype.detach = function(element) {
    ContentEdit.NodeCollection.prototype.detach.call(this, element);
    if (this.children.length === 0 && this.parent()) {
      return this.parent().detach(this);
    }
  };

  ElementCollection.prototype.html = function(indent) {
    var c, children;
    if (indent == null) {
      indent = '';
    }
    children = (function() {
      var j, len, ref, results;
      ref = this.children;
      results = [];
      for (j = 0, len = ref.length; j < len; j++) {
        c = ref[j];
        results.push(c.html(indent + ContentEdit.INDENT));
      }
      return results;
    }).call(this);
    return (indent + "<" + (this.tagName()) + (this._attributesToString()) + ">\n") + ((children.join('\n')) + "\n") + (indent + "</" + (this.tagName()) + ">");
  };

  ElementCollection.prototype.mount = function() {
    var child, j, len, name, ref, ref1, results, value;
    this._domElement = document.createElement(this._tagName);
    ref = this._attributes;
    for (name in ref) {
      value = ref[name];
      this._domElement.setAttribute(name, value);
    }
    ElementCollection.__super__.mount.call(this);
    ref1 = this.children;
    results = [];
    for (j = 0, len = ref1.length; j < len; j++) {
      child = ref1[j];
      results.push(child.mount());
    }
    return results;
  };

  ElementCollection.prototype.unmount = function() {
    var child, j, len, ref;
    ref = this.children;
    for (j = 0, len = ref.length; j < len; j++) {
      child = ref[j];
      child.unmount();
    }
    return ElementCollection.__super__.unmount.call(this);
  };

  ElementCollection.prototype.blur = void 0;

  ElementCollection.prototype.focus = void 0;

  return ElementCollection;

})(ContentEdit.Element);

ContentEdit.ResizableElement = (function(superClass) {
  extend(ResizableElement, superClass);

  function ResizableElement(tagName, attributes) {
    ResizableElement.__super__.constructor.call(this, tagName, attributes);
    this._domSizeInfoElement = null;
    this._aspectRatio = 1;
  }

  ResizableElement.prototype.aspectRatio = function() {
    return this._aspectRatio;
  };

  ResizableElement.prototype.maxSize = function() {
    var maxWidth;
    maxWidth = parseInt(this.attr('data-ce-max-width') || 0);
    if (!maxWidth) {
      maxWidth = ContentEdit.DEFAULT_MAX_ELEMENT_WIDTH;
    }
    maxWidth = Math.max(maxWidth, this.size()[0]);
    return [maxWidth, maxWidth * this.aspectRatio()];
  };

  ResizableElement.prototype.minSize = function() {
    var minWidth;
    minWidth = parseInt(this.attr('data-ce-min-width') || 0);
    if (!minWidth) {
      minWidth = ContentEdit.DEFAULT_MIN_ELEMENT_WIDTH;
    }
    minWidth = Math.min(minWidth, this.size()[0]);
    return [minWidth, minWidth * this.aspectRatio()];
  };

  ResizableElement.prototype.type = function() {
    return 'ResizableElement';
  };

  ResizableElement.prototype.mount = function() {
    ResizableElement.__super__.mount.call(this);
    return this._domElement.setAttribute('data-ce-size', this._getSizeInfo());
  };

  ResizableElement.prototype.resize = function(corner, x, y) {
    if (!this.isMounted()) {
      return;
    }
    return ContentEdit.Root.get().startResizing(this, corner, x, y, true);
  };

  ResizableElement.prototype.size = function(newSize) {
    var height, maxSize, minSize, width;
    if (!newSize) {
      width = parseInt(this.attr('width') || 1);
      height = parseInt(this.attr('height') || 1);
      return [width, height];
    }
    newSize[0] = parseInt(newSize[0]);
    newSize[1] = parseInt(newSize[1]);
    minSize = this.minSize();
    newSize[0] = Math.max(newSize[0], minSize[0]);
    newSize[1] = Math.max(newSize[1], minSize[1]);
    maxSize = this.maxSize();
    newSize[0] = Math.min(newSize[0], maxSize[0]);
    newSize[1] = Math.min(newSize[1], maxSize[1]);
    this.attr('width', parseInt(newSize[0]));
    this.attr('height', parseInt(newSize[1]));
    if (this.isMounted()) {
      this._domElement.style.width = newSize[0] + "px";
      this._domElement.style.height = newSize[1] + "px";
      return this._domElement.setAttribute('data-ce-size', this._getSizeInfo());
    }
  };

  ResizableElement.prototype._onMouseDown = function(ev) {
    var corner;
    ResizableElement.__super__._onMouseDown.call(this, ev);
    corner = this._getResizeCorner(ev.clientX, ev.clientY);
    if (corner) {
      return this.resize(corner, ev.clientX, ev.clientY);
    } else {
      clearTimeout(this._dragTimeout);
      return this._dragTimeout = setTimeout((function(_this) {
        return function() {
          return _this.drag(ev.pageX, ev.pageY);
        };
      })(this), 150);
    }
  };

  ResizableElement.prototype._onMouseMove = function(ev) {
    var corner;
    ResizableElement.__super__._onMouseMove.call(this);
    this._removeCSSClass('ce-element--resize-top-left');
    this._removeCSSClass('ce-element--resize-top-right');
    this._removeCSSClass('ce-element--resize-bottom-left');
    this._removeCSSClass('ce-element--resize-bottom-right');
    corner = this._getResizeCorner(ev.clientX, ev.clientY);
    if (corner) {
      return this._addCSSClass("ce-element--resize-" + corner[0] + "-" + corner[1]);
    }
  };

  ResizableElement.prototype._onMouseOut = function(ev) {
    ResizableElement.__super__._onMouseOut.call(this);
    this._removeCSSClass('ce-element--resize-top-left');
    this._removeCSSClass('ce-element--resize-top-right');
    this._removeCSSClass('ce-element--resize-bottom-left');
    return this._removeCSSClass('ce-element--resize-bottom-right');
  };

  ResizableElement.prototype._onMouseUp = function(ev) {
    ResizableElement.__super__._onMouseUp.call(this);
    if (this._dragTimeout) {
      return clearTimeout(this._dragTimeout);
    }
  };

  ResizableElement.prototype._getResizeCorner = function(x, y) {
    var corner, cornerSize, rect, ref, size;
    rect = this._domElement.getBoundingClientRect();
    ref = [x - rect.left, y - rect.top], x = ref[0], y = ref[1];
    size = this.size();
    cornerSize = ContentEdit.RESIZE_CORNER_SIZE;
    cornerSize = Math.min(cornerSize, Math.max(parseInt(size[0] / 4), 1));
    cornerSize = Math.min(cornerSize, Math.max(parseInt(size[1] / 4), 1));
    corner = null;
    if (x < cornerSize) {
      if (y < cornerSize) {
        corner = ['top', 'left'];
      } else if (y > rect.height - cornerSize) {
        corner = ['bottom', 'left'];
      }
    } else if (x > rect.width - cornerSize) {
      if (y < cornerSize) {
        corner = ['top', 'right'];
      } else if (y > rect.height - cornerSize) {
        corner = ['bottom', 'right'];
      }
    }
    return corner;
  };

  ResizableElement.prototype._getSizeInfo = function() {
    var size;
    size = this.size();
    return "w " + size[0] + " × h " + size[1];
  };

  return ResizableElement;

})(ContentEdit.Element);
