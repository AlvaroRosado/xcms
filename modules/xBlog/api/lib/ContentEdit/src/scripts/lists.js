// Generated by CoffeeScript 1.10.0
var _mergers,
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

ContentEdit.List = (function(superClass) {
  extend(List, superClass);

  function List(tagName, attributes) {
    List.__super__.constructor.call(this, tagName, attributes);
  }

  List.prototype.cssTypeName = function() {
    return 'list';
  };

  List.prototype.type = function() {
    return 'List';
  };

  List.prototype.typeName = function() {
    return 'List';
  };

  List.prototype._onMouseOver = function(ev) {
    if (this.parent().type() === 'ListItem') {
      return;
    }
    List.__super__._onMouseOver.call(this, ev);
    return this._removeCSSClass('ce-element--over');
  };

  List.droppers = {
    'Image': ContentEdit.Element._dropBoth,
    'List': ContentEdit.Element._dropVert,
    'PreText': ContentEdit.Element._dropVert,
    'Static': ContentEdit.Element._dropVert,
    'Text': ContentEdit.Element._dropVert,
    'Video': ContentEdit.Element._dropBoth
  };

  List.fromDOMElement = function(domElement) {
    var c, childNode, childNodes, j, len, list;
    list = new this(domElement.tagName, this.getDOMElementAttributes(domElement));
    childNodes = (function() {
      var j, len, ref, results;
      ref = domElement.childNodes;
      results = [];
      for (j = 0, len = ref.length; j < len; j++) {
        c = ref[j];
        results.push(c);
      }
      return results;
    })();
    for (j = 0, len = childNodes.length; j < len; j++) {
      childNode = childNodes[j];
      if (childNode.nodeType !== 1) {
        continue;
      }
      if (childNode.tagName.toLowerCase() !== 'li') {
        continue;
      }
      list.attach(ContentEdit.ListItem.fromDOMElement(childNode));
    }
    if (list.children.length === 0) {
      return null;
    }
    return list;
  };

  return List;

})(ContentEdit.ElementCollection);

ContentEdit.TagNames.get().register(ContentEdit.List, 'ol', 'ul');

ContentEdit.ListItem = (function(superClass) {
  extend(ListItem, superClass);

  function ListItem(attributes) {
    ListItem.__super__.constructor.call(this, 'li', attributes);
  }

  ListItem.prototype.cssTypeName = function() {
    return 'list-item';
  };

  ListItem.prototype.list = function() {
    if (this.children.length === 2) {
      return this.children[1];
    }
    return null;
  };

  ListItem.prototype.listItemText = function() {
    if (this.children.length > 0) {
      return this.children[0];
    }
    return null;
  };

  ListItem.prototype.type = function() {
    return 'ListItem';
  };

  ListItem.prototype.html = function(indent) {
    var lines;
    if (indent == null) {
      indent = '';
    }
    lines = [indent + "<li" + (this._attributesToString()) + ">"];
    if (this.listItemText()) {
      lines.push(this.listItemText().html(indent + ContentEdit.INDENT));
    }
    if (this.list()) {
      lines.push(this.list().html(indent + ContentEdit.INDENT));
    }
    lines.push(indent + "</li>");
    return lines.join('\n');
  };

  ListItem.prototype.indent = function() {
    var sibling;
    if (this.parent().children.indexOf(this) === 0) {
      return;
    }
    sibling = this.previousSibling();
    if (!sibling.list()) {
      sibling.attach(new ContentEdit.List(sibling.parent().tagName()));
    }
    this.listItemText().storeState();
    this.parent().detach(this);
    sibling.list().attach(this);
    return this.listItemText().restoreState();
  };

  ListItem.prototype.remove = function() {
    var child, i, index, j, len, ref;
    if (!this.parent()) {
      return;
    }
    index = this.parent().children.indexOf(this);
    if (this.list()) {
      ref = this.list().children.slice();
      for (i = j = 0, len = ref.length; j < len; i = ++j) {
        child = ref[i];
        child.parent().detach(child);
        this.parent().attach(child, i + index);
      }
    }
    return this.parent().detach(this);
  };

  ListItem.prototype.unindent = function() {
    var child, grandParent, i, itemIndex, j, k, l, len, len1, len2, len3, list, m, parent, parentIndex, ref, ref1, selection, sibling, siblings, text;
    parent = this.parent();
    grandParent = parent.parent();
    siblings = parent.children.slice(parent.children.indexOf(this) + 1, parent.children.length);
    if (grandParent.type() === 'ListItem') {
      this.listItemText().storeState();
      parent.detach(this);
      grandParent.parent().attach(this, grandParent.parent().children.indexOf(grandParent) + 1);
      if (siblings.length && !this.list()) {
        this.attach(new ContentEdit.List(parent.tagName()));
      }
      for (j = 0, len = siblings.length; j < len; j++) {
        sibling = siblings[j];
        sibling.parent().detach(sibling);
        this.list().attach(sibling);
      }
      return this.listItemText().restoreState();
    } else {
      text = new ContentEdit.Text('p', this.attr('class') ? {
        'class': this.attr('class')
      } : {}, this.listItemText().content);
      selection = null;
      if (this.listItemText().isFocused()) {
        selection = ContentSelect.Range.query(this.listItemText().domElement());
      }
      parentIndex = grandParent.children.indexOf(parent);
      itemIndex = parent.children.indexOf(this);
      if (itemIndex === 0) {
        list = null;
        if (parent.children.length === 1) {
          if (this.list()) {
            list = new ContentEdit.List(parent.tagName());
          }
          grandParent.detach(parent);
        } else {
          parent.detach(this);
        }
        grandParent.attach(text, parentIndex);
        if (list) {
          grandParent.attach(list, parentIndex + 1);
        }
        if (this.list()) {
          ref = this.list().children.slice();
          for (i = k = 0, len1 = ref.length; k < len1; i = ++k) {
            child = ref[i];
            child.parent().detach(child);
            if (list) {
              list.attach(child);
            } else {
              parent.attach(child, i);
            }
          }
        }
      } else if (itemIndex === parent.children.length - 1) {
        parent.detach(this);
        grandParent.attach(text, parentIndex + 1);
        if (this.list()) {
          grandParent.attach(this.list(), parentIndex + 2);
        }
      } else {
        parent.detach(this);
        grandParent.attach(text, parentIndex + 1);
        list = new ContentEdit.List(parent.tagName());
        grandParent.attach(list, parentIndex + 2);
        if (this.list()) {
          ref1 = this.list().children.slice();
          for (l = 0, len2 = ref1.length; l < len2; l++) {
            child = ref1[l];
            child.parent().detach(child);
            list.attach(child);
          }
        }
        for (m = 0, len3 = siblings.length; m < len3; m++) {
          sibling = siblings[m];
          sibling.parent().detach(sibling);
          list.attach(sibling);
        }
      }
      if (selection) {
        text.focus();
        return selection.select(text.domElement());
      }
    }
  };

  ListItem.prototype._onMouseOver = function(ev) {
    ListItem.__super__._onMouseOver.call(this, ev);
    return this._removeCSSClass('ce-element--over');
  };

  ListItem.prototype._addDOMEventListeners = function() {};

  ListItem.prototype._removeDOMEventListners = function() {};

  ListItem.fromDOMElement = function(domElement) {
    var childNode, content, j, len, listDOMElement, listElement, listItem, listItemText, ref, ref1;
    listItem = new this(this.getDOMElementAttributes(domElement));
    content = '';
    listDOMElement = null;
    ref = domElement.childNodes;
    for (j = 0, len = ref.length; j < len; j++) {
      childNode = ref[j];
      if (childNode.nodeType === 1) {
        if ((ref1 = childNode.tagName.toLowerCase()) === 'ul' || ref1 === 'li') {
          if (!listDOMElement) {
            listDOMElement = childNode;
          }
        } else {
          content += childNode.outerHTML;
        }
      } else {
        content += HTMLString.String.encode(childNode.textContent);
      }
    }
    content = content.replace(/^\s+|\s+$/g, '');
    listItemText = new ContentEdit.ListItemText(content);
    listItem.attach(listItemText);
    if (listDOMElement) {
      listElement = ContentEdit.List.fromDOMElement(listDOMElement);
      listItem.attach(listElement);
    }
    return listItem;
  };

  return ListItem;

})(ContentEdit.ElementCollection);

ContentEdit.ListItemText = (function(superClass) {
  extend(ListItemText, superClass);

  function ListItemText(content) {
    ListItemText.__super__.constructor.call(this, 'div', {}, content);
  }

  ListItemText.prototype.cssTypeName = function() {
    return 'list-item-text';
  };

  ListItemText.prototype.type = function() {
    return 'ListItemText';
  };

  ListItemText.prototype.typeName = function() {
    return 'List item';
  };

  ListItemText.prototype.blur = function() {
    if (this.content.isWhitespace()) {
      this.parent().remove();
    } else if (this.isMounted()) {
      this._domElement.blur();
      this._domElement.removeAttribute('contenteditable');
    }
    return ContentEdit.Element.prototype.blur.call(this);
  };

  ListItemText.prototype.html = function(indent) {
    var content;
    if (indent == null) {
      indent = '';
    }
    if (!this._lastCached || this._lastCached < this._modified) {
      content = this.content.copy();
      content.optimize();
      this._lastCached = Date.now();
      this._cached = content.html();
    }
    return "" + indent + this._cached;
  };

  ListItemText.prototype._onMouseDown = function(ev) {
    var initDrag;
    ContentEdit.Element.prototype._onMouseDown.call(this, ev);
    initDrag = (function(_this) {
      return function() {
        var listRoot;
        if (ContentEdit.Root.get().dragging() === _this) {
          ContentEdit.Root.get().cancelDragging();
          listRoot = _this.closest(function(node) {
            return node.parent().type() === 'Region';
          });
          return listRoot.drag(ev.pageX, ev.pageY);
        } else {
          _this.drag(ev.pageX, ev.pageY);
          return _this._dragTimeout = setTimeout(initDrag, ContentEdit.DRAG_HOLD_DURATION * 2);
        }
      };
    })(this);
    clearTimeout(this._dragTimeout);
    return this._dragTimeout = setTimeout(initDrag, ContentEdit.DRAG_HOLD_DURATION);
  };

  ListItemText.prototype._onMouseMove = function(ev) {
    if (this._dragTimeout) {
      clearTimeout(this._dragTimeout);
    }
    return ContentEdit.Element.prototype._onMouseMove.call(this, ev);
  };

  ListItemText.prototype._onMouseUp = function(ev) {
    if (this._dragTimeout) {
      clearTimeout(this._dragTimeout);
    }
    return ContentEdit.Element.prototype._onMouseUp.call(this, ev);
  };

  ListItemText.prototype._keyTab = function(ev) {
    ev.preventDefault();
    if (ev.shiftKey) {
      return this.parent().unindent();
    } else {
      return this.parent().indent();
    }
  };

  ListItemText.prototype._keyReturn = function(ev) {
    var grandParent, list, listItem, selection, tail, tip;
    ev.preventDefault();
    if (this.content.isWhitespace()) {
      this.parent().unindent();
      return;
    }
    ContentSelect.Range.query(this._domElement);
    selection = ContentSelect.Range.query(this._domElement);
    tip = this.content.substring(0, selection.get()[0]);
    tail = this.content.substring(selection.get()[1]);
    if (tip.length() + tail.length() === 0) {
      this.parent().unindent();
      return;
    }
    this.content = tip.trim();
    this.updateInnerHTML();
    grandParent = this.parent().parent();
    listItem = new ContentEdit.ListItem(this.attr('class') ? {
      'class': this.attr('class')
    } : {});
    grandParent.attach(listItem, grandParent.children.indexOf(this.parent()) + 1);
    listItem.attach(new ContentEdit.ListItemText(tail.trim()));
    list = this.parent().list();
    if (list) {
      this.parent().detach(list);
      listItem.attach(list);
    }
    if (tip.length()) {
      listItem.listItemText().focus();
      selection = new ContentSelect.Range(0, 0);
      return selection.select(listItem.listItemText().domElement());
    } else {
      selection = new ContentSelect.Range(0, tip.length());
      return selection.select(this._domElement);
    }
  };

  ListItemText.droppers = {
    'ListItemText': function(element, target, placement) {
      var elementParent, insertIndex, listItem, targetParent;
      elementParent = element.parent();
      targetParent = target.parent();
      elementParent.remove();
      elementParent.detach(element);
      listItem = new ContentEdit.ListItem(elementParent._attributes);
      listItem.attach(element);
      if (targetParent.list() && placement[0] === 'below') {
        targetParent.list().attach(listItem, 0);
        return;
      }
      insertIndex = targetParent.parent().children.indexOf(targetParent);
      if (placement[0] === 'below') {
        insertIndex += 1;
      }
      return targetParent.parent().attach(listItem, insertIndex);
    },
    'Text': function(element, target, placement) {
      var cssClass, insertIndex, listItem, targetParent, text;
      if (element.type() === 'Text') {
        targetParent = target.parent();
        element.parent().detach(element);
        cssClass = element.attr('class');
        listItem = new ContentEdit.ListItem(cssClass ? {
          'class': cssClass
        } : {});
        listItem.attach(new ContentEdit.ListItemText(element.content));
        if (targetParent.list() && placement[0] === 'below') {
          targetParent.list().attach(listItem, 0);
          return;
        }
        insertIndex = targetParent.parent().children.indexOf(targetParent);
        if (placement[0] === 'below') {
          insertIndex += 1;
        }
        targetParent.parent().attach(listItem, insertIndex);
        listItem.listItemText().focus();
        if (element._savedSelection) {
          return element._savedSelection.select(listItem.listItemText().domElement());
        }
      } else {
        cssClass = element.attr('class');
        text = new ContentEdit.Text('p', cssClass ? {
          'class': cssClass
        } : {}, element.content);
        element.parent().remove();
        insertIndex = target.parent().children.indexOf(target);
        if (placement[0] === 'below') {
          insertIndex += 1;
        }
        target.parent().attach(text, insertIndex);
        text.focus();
        if (element._savedSelection) {
          return element._savedSelection.select(text.domElement());
        }
      }
    }
  };

  ListItemText.mergers = {
    'ListItemText': function(element, target) {
      var offset;
      offset = target.content.length();
      if (element.content.length()) {
        target.content = target.content.concat(element.content);
      }
      if (target.isMounted()) {
        target._domElement.innerHTML = target.content.html();
      }
      target.focus();
      new ContentSelect.Range(offset, offset).select(target._domElement);
      if (element.type() === 'Text') {
        if (element.parent()) {
          element.parent().detach(element);
        }
      } else {
        element.parent().remove();
      }
      return target.taint();
    }
  };

  return ListItemText;

})(ContentEdit.Text);

_mergers = ContentEdit.ListItemText.mergers;

_mergers['Text'] = _mergers['ListItemText'];
