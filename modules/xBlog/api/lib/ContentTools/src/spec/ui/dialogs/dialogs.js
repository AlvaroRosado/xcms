// Generated by CoffeeScript 1.10.0
describe('ContentTools.AnchoredDialogUI', function() {
  var div, editor;
  div = null;
  editor = null;
  beforeEach(function() {
    div = document.createElement('div');
    div.setAttribute('class', 'editable');
    document.body.appendChild(div);
    editor = ContentTools.EditorApp.get();
    return editor.init('.editable');
  });
  afterEach(function() {
    editor.destroy();
    return document.body.removeChild(div);
  });
  describe('ContentTools.AnchoredDialogUI()', function() {
    return it('should return an instance of a AnchoredDialogUI', function() {
      var dialog;
      dialog = new ContentTools.AnchoredDialogUI();
      return expect(dialog instanceof ContentTools.AnchoredDialogUI).toBe(true);
    });
  });
  describe('ContentTools.AnchoredDialogUI.mount()', function() {
    return it('should mount the dialog', function() {
      var dialog;
      dialog = new ContentTools.AnchoredDialogUI();
      editor.attach(dialog);
      dialog.mount();
      return expect(dialog.isMounted()).toBe(true);
    });
  });
  return describe('ContentTools.AnchoredDialogUI.position()', function() {
    return it('should set/get the dialog\'s position', function() {
      var dialog, style;
      dialog = new ContentTools.AnchoredDialogUI();
      editor.attach(dialog);
      dialog.mount();
      expect(dialog.position()).toEqual([0, 0]);
      dialog.position([7, 7]);
      style = dialog.domElement().style;
      expect(dialog.position()).toEqual([7, 7]);
      expect(style.top).toBe('7px');
      return expect(style.left).toBe('7px');
    });
  });
});

describe('ContentTools.DialogUI', function() {
  var div, editor;
  div = null;
  editor = null;
  beforeEach(function() {
    div = document.createElement('div');
    div.setAttribute('class', 'editable');
    document.body.appendChild(div);
    editor = ContentTools.EditorApp.get();
    return editor.init('.editable');
  });
  afterEach(function() {
    editor.destroy();
    return document.body.removeChild(div);
  });
  describe('ContentTools.DialogUI()', function() {
    return it('should return an instance of a DialogUI', function() {
      var dialog;
      dialog = new ContentTools.DialogUI('foo');
      return expect(dialog instanceof ContentTools.DialogUI).toBe(true);
    });
  });
  describe('ContentTools.DialogUI.busy()', function() {
    return it('should set/get the busy state for the dialog', function() {
      var classes, dialog;
      dialog = new ContentTools.DialogUI('foo');
      editor.attach(dialog);
      dialog.mount();
      expect(dialog.busy()).toBe(false);
      classes = dialog.domElement().getAttribute('class');
      expect(classes.indexOf('ct-dialog--busy')).toBe(-1);
      dialog.busy(true);
      expect(dialog.busy()).toBe(true);
      classes = dialog.domElement().getAttribute('class');
      return expect(classes.indexOf('ct-dialog--busy') > 0).toBe(true);
    });
  });
  describe('ContentTools.DialogUI.position()', function() {
    return it('should set/get the dialog\'s caption', function() {
      var dialog;
      dialog = new ContentTools.DialogUI('foo');
      editor.attach(dialog);
      dialog.mount();
      expect(dialog.caption()).toEqual('foo');
      expect(dialog._domCaption.textContent).toEqual('foo');
      dialog.caption('bar');
      expect(dialog.caption()).toEqual('bar');
      return expect(dialog._domCaption.textContent).toEqual('bar');
    });
  });
  describe('ContentTools.DialogUI.mount()', function() {
    return it('should mount the dialog', function() {
      var dialog;
      dialog = new ContentTools.DialogUI();
      editor.attach(dialog);
      dialog.mount();
      return expect(dialog.isMounted()).toBe(true);
    });
  });
  return describe('ContentTools.DialogUI.unmount()', function() {
    return it('should unmount the component', function() {
      var dialog;
      dialog = new ContentTools.DialogUI();
      editor.attach(dialog);
      dialog.mount();
      dialog.unmount();
      return expect(dialog.isMounted()).toBe(false);
    });
  });
});
