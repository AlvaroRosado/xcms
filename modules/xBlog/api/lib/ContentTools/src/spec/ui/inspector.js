// Generated by CoffeeScript 1.10.0
describe('ContentTools.InspectorUI', function() {
  var div, editor;
  div = null;
  editor = null;
  beforeEach(function() {
    div = document.createElement('div');
    div.setAttribute('class', 'editable');
    div.setAttribute('id', 'foo');
    document.body.appendChild(div);
    div.innerHTML = '<p>bar</p>\n<ul>\n    <li>zee</li>\n</ul>';
    editor = ContentTools.EditorApp.get();
    return editor.init('.editable');
  });
  afterEach(function() {
    editor.destroy();
    return document.body.removeChild(div);
  });
  describe('ContentTools.InspectorUI()', function() {
    return it('should return an instance of a InspectorUI', function() {
      var inspector;
      inspector = new ContentTools.InspectorUI();
      return expect(inspector instanceof ContentTools.InspectorUI).toBe(true);
    });
  });
  describe('ContentTools.InspectorUI.mount()', function() {
    return it('should mount the component', function() {
      var inspector;
      inspector = new ContentTools.InspectorUI();
      editor.attach(inspector);
      inspector.mount();
      return expect(inspector.isMounted()).toBe(true);
    });
  });
  describe('ContentTools.InspectorUI.unmount()', function() {
    return it('should unmount the component', function() {
      var inspector;
      inspector = new ContentTools.InspectorUI();
      editor.attach(inspector);
      inspector.mount();
      inspector.unmount();
      return expect(inspector.isMounted()).toBe(false);
    });
  });
  return describe('ContentTools.InspectorUI.updateTags()', function() {
    return it('should update the tags displayed to reflect the path to the current element', function() {
      var elements, inspector, region;
      editor.start();
      inspector = editor._inspector;
      region = editor.regions()['foo'];
      elements = region.children;
      elements[0].focus();
      expect(inspector._tagUIs.length).toEqual(1);
      expect(inspector._tagUIs[0].element.tagName()).toEqual('p');
      elements[1].children[0].children[0].focus();
      expect(inspector._tagUIs.length).toEqual(2);
      expect(inspector._tagUIs[0].element.tagName()).toEqual('ul');
      expect(inspector._tagUIs[1].element.tagName()).toEqual('li');
      return editor.stop();
    });
  });
});

describe('ContentTools.TagUI', function() {
  var div, editor;
  div = null;
  editor = null;
  beforeEach(function() {
    div = document.createElement('div');
    div.setAttribute('class', 'editable');
    div.setAttribute('id', 'foo');
    document.body.appendChild(div);
    div.innerHTML = '<p>bar</p>\n<ul>\n    <li>zee</li>\n</ul>';
    editor = ContentTools.EditorApp.get();
    return editor.init('.editable');
  });
  afterEach(function() {
    editor.destroy();
    return document.body.removeChild(div);
  });
  describe('ContentTools.TagUI()', function() {
    return it('should return an instance of a TagUI', function() {
      var tag;
      tag = new ContentTools.TagUI();
      return expect(tag instanceof ContentTools.TagUI).toBe(true);
    });
  });
  describe('ContentTools.TagUI.mount()', function() {
    return it('should mount the component', function() {
      var elements, inspector, region, tag;
      editor.start();
      inspector = editor._inspector;
      region = editor.regions()['foo'];
      elements = region.children;
      tag = new ContentTools.TagUI(elements[0]);
      tag.mount(inspector._domTags);
      return expect(tag.isMounted()).toBe(true);
    });
  });
  return describe('ContentTools.TagUI > Interaction', function() {
    return it('should allow the properties dialog to be used', function() {
      var app, dialog, element, inspector, mouseDownEvent, region, tag;
      editor.start();
      inspector = editor._inspector;
      region = editor.regions()['foo'];
      element = region.children[0];
      element.focus();
      tag = inspector._tagUIs[0];
      mouseDownEvent = document.createEvent('CustomEvent');
      mouseDownEvent.initCustomEvent('mousedown', false, false, null);
      tag.domElement().dispatchEvent(mouseDownEvent);
      app = ContentTools.EditorApp.get();
      dialog = app.children()[app.children().length - 1];
      expect(dialog instanceof ContentTools.PropertiesDialog).toBe(true);
      dialog.trigger('save', {
        title: 'bar'
      }, {
        'zee': true
      }, 'foo');
      expect(element.attr('title')).toBe('bar');
      expect(element.hasCSSClass('zee')).toBe(true);
      expect(element.content.html()).toBe('foo');
      tag.domElement().dispatchEvent(mouseDownEvent);
      dialog = app.children()[app.children().length - 1];
      dialog.trigger('save', {
        title: null
      }, {
        'zee': false
      }, 'bar');
      expect(element.attr('title')).toBe(void 0);
      expect(element.hasCSSClass('zee')).toBe(false);
      return expect(element.content.html()).toBe('bar');
    });
  });
});
