// Generated by CoffeeScript 1.10.0
window.getComputedStyle = null;

navigator.appVersion = 'Linux';

describe('ContentTools.ComponentUI()', function() {
  return it('should return an instance of a ComponentUI', function() {
    var component;
    component = new ContentTools.ComponentUI();
    return expect(component instanceof ContentTools.ComponentUI).toBe(true);
  });
});

describe('ContentTools.ComponentUI.children()', function() {
  return it('should return a list of children attached to the component', function() {
    var child, parent;
    parent = new ContentTools.ComponentUI();
    child = new ContentTools.ComponentUI();
    parent.attach(child);
    return expect(parent.children()).toEqual([child]);
  });
});

describe('ContentTools.ComponentUI.domElement()', function() {
  return it('should return a DOM element for the component if it\'s mounted', function() {
    var component, domElement;
    component = new ContentTools.ComponentUI();
    domElement = document.createElement('div');
    component._domElement = domElement;
    return expect(component.domElement()).toBe(domElement);
  });
});

describe('ContentTools.ComponentUI.isMounted()', function() {
  return it('should return true if the component is mounted', function() {
    var component, domElement;
    component = new ContentTools.ComponentUI();
    expect(component.isMounted()).toBe(false);
    domElement = document.createElement('div');
    component._domElement = domElement;
    return expect(component.isMounted()).toBe(true);
  });
});

describe('ContentTools.ComponentUI.parent()', function() {
  return it('should return a the parent the component is attached to', function() {
    var child, parent;
    parent = new ContentTools.ComponentUI();
    child = new ContentTools.ComponentUI();
    parent.attach(child);
    return expect(child.parent()).toBe(parent);
  });
});

describe('ContentTools.ComponentUI.attach()', function() {
  return it('should attach a component as a child of another component', function() {
    var child, parent;
    parent = new ContentTools.ComponentUI();
    child = new ContentTools.ComponentUI();
    parent.attach(child);
    return expect(parent.children()).toEqual([child]);
  });
});

describe('ContentTools.ComponentUI.addCSSClass()', function() {
  return it('should add a CSS class to the component\'s DOM element', function() {
    var component, domElement;
    component = new ContentTools.ComponentUI();
    domElement = document.createElement('div');
    component._domElement = domElement;
    component.addCSSClass('foo');
    return expect(domElement.getAttribute('class')).toBe('foo');
  });
});

describe('ContentTools.ComponentUI.detatch()', function() {
  return it('should detatch a child component', function() {
    var child, parent;
    parent = new ContentTools.ComponentUI();
    child = new ContentTools.ComponentUI();
    parent.attach(child);
    parent.detatch(child);
    return expect(parent.children()).toEqual([]);
  });
});

describe('ContentTools.ComponentUI.mount()', function() {
  return it('should do nothing, `mount()` is a placeholder method only', function() {
    var component;
    component = new ContentTools.ComponentUI();
    component.mount();
    return expect(component.isMounted()).toBe(false);
  });
});

describe('ContentTools.ComponentUI.removeCSSClass()', function() {
  return it('should remove a CSS class from the component\'s DOM element', function() {
    var component, domElement;
    component = new ContentTools.ComponentUI();
    domElement = document.createElement('div');
    component._domElement = domElement;
    component.addCSSClass('foo');
    component.addCSSClass('bar');
    component.removeCSSClass('foo');
    return expect(domElement.getAttribute('class')).toBe('bar');
  });
});

describe('ContentTools.ComponentUI.unmount()', function() {
  return it('should remove a CSS class from the component\'s DOM element', function() {
    var component, domElement;
    component = new ContentTools.ComponentUI();
    domElement = document.createElement('div');
    document.body.appendChild(domElement);
    component._domElement = domElement;
    component.unmount();
    return expect(component.isMounted()).toBe(false);
  });
});

describe('ContentTools.ComponentUI.bind()', function() {
  return it('should bind a function so that it\'s called whenever the event is triggered against the component', function() {
    var component, foo;
    foo = {
      handleFoo: function() {}
    };
    spyOn(foo, 'handleFoo');
    component = new ContentTools.ComponentUI();
    component.bind('foo', foo.handleFoo);
    component.trigger('foo');
    return expect(foo.handleFoo).toHaveBeenCalled();
  });
});

describe('ContentTools.ComponentUI.trigger()', function() {
  return it('should trigger an event against the component with specified arguments', function() {
    var component, foo;
    foo = {
      handleFoo: function() {}
    };
    spyOn(foo, 'handleFoo');
    component = new ContentTools.ComponentUI();
    component.bind('foo', foo.handleFoo);
    component.trigger('foo', 123);
    return expect(foo.handleFoo).toHaveBeenCalledWith(123);
  });
});

describe('ContentTools.ComponentUI.createDiv()', function() {
  return it('should create a DOM element with the specified classes, attributes and content', function() {
    var domElement;
    domElement = ContentTools.ComponentUI.createDiv(['foo'], {
      'bar': 'foo'
    }, 'foo bar');
    expect(domElement.getAttribute('class')).toBe('foo');
    expect(domElement.getAttribute('bar')).toBe('foo');
    return expect(domElement.innerHTML).toBe('foo bar');
  });
});

describe('ContentTools.WidgetUI()', function() {
  return it('should return an instance of a WidgetUI', function() {
    var widget;
    widget = new ContentTools.WidgetUI();
    return expect(widget instanceof ContentTools.WidgetUI).toBe(true);
  });
});

describe('ContentTools.WidgetUI.attach()', function() {
  return it('should attach a widget as a child of another widget and mount it', function() {
    var child, parent;
    parent = new ContentTools.WidgetUI();
    child = new ContentTools.WidgetUI();
    spyOn(child, 'mount');
    parent.attach(child);
    expect(parent.children()).toEqual([child]);
    return expect(child.mount).toHaveBeenCalledWith();
  });
});

describe('ContentTools.WidgetUI.detatch()', function() {
  return it('should detatch a child widget and unmount it', function() {
    var child, domElement, parent;
    parent = new ContentTools.WidgetUI();
    child = new ContentTools.WidgetUI();
    spyOn(child, 'unmount');
    parent.attach(child);
    domElement = document.createElement('div');
    document.body.appendChild(domElement);
    parent._domElement = domElement;
    parent.detatch(child);
    expect(parent.children()).toEqual([]);
    return expect(child.unmount).toHaveBeenCalled();
  });
});

describe('ContentTools.WidgetUI.show()', function() {
  return it('should add the `--active` CSS modifier class to a widget', function(done) {
    var checkShown, domElement, widget;
    widget = new ContentTools.WidgetUI();
    domElement = document.createElement('div');
    document.body.appendChild(domElement);
    widget._domElement = domElement;
    widget.show();
    checkShown = function() {
      var classes;
      classes = widget.domElement().getAttribute('class').split(' ');
      expect(classes.indexOf('ct-widget--active') > -1).toBe(true);
      return done();
    };
    return setTimeout(checkShown, 500);
  });
});

describe('ContentTools.WidgetUI.hide()', function() {
  var widget;
  widget = null;
  beforeEach(function() {
    var domElement;
    widget = new ContentTools.WidgetUI();
    domElement = document.createElement('div');
    domElement.setAttribute('class', 'ct-widget');
    document.body.appendChild(domElement);
    return widget._domElement = domElement;
  });
  it('should remove the `--active` CSS modifier class from a widget', function() {
    var classes;
    widget.hide();
    classes = (widget.domElement().getAttribute('class') || '').split(' ');
    return expect(classes.indexOf('ct-widget--active') === -1).toBe(true);
  });
  return it('should unmount the component after X seconds', function(done) {
    var checkUnmounted;
    widget.hide();
    checkUnmounted = function() {
      expect(widget.isMounted()).toBe(false);
      return done();
    };
    return setTimeout(checkUnmounted, 500);
  });
});

describe('ContentTools.AnchoredComponentUI()', function() {
  return it('should return an instance of a AnchoredComponentUI', function() {
    var anchored;
    anchored = new ContentTools.AnchoredComponentUI();
    return expect(anchored instanceof ContentTools.AnchoredComponentUI).toBe(true);
  });
});

describe('ContentTools.AnchoredComponentUI.mount()', function() {
  return it('should mount the component to a DOM element', function() {
    var anchored, domElement, parentDOMElement;
    domElement = document.createElement('div');
    parentDOMElement = document.createElement('div');
    anchored = new ContentTools.AnchoredComponentUI();
    anchored._domElement = domElement;
    anchored.mount(parentDOMElement);
    return expect(anchored.domElement().parentNode).toEqual(parentDOMElement);
  });
});
