// Generated by CoffeeScript 1.10.0
describe('ContentTools.StylePalette.add()', function() {
  return it('should return a `ContentTools.Style` instance', function() {
    var style;
    style = new ContentTools.Style('test', 'test', ['test']);
    ContentTools.StylePalette.add(style);
    return expect(ContentTools.StylePalette.styles('test')).toEqual([style]);
  });
});

describe('ContentTools.StylePalette.styles()', function() {
  return it('should return a list of `ContentTools.Style` instances by tag name', function() {
    var test1, test2, test3;
    test1 = new ContentTools.Style('Test 1', 'test-1', ['p']);
    test2 = new ContentTools.Style('Test 2', 'test-2', ['h1', 'p']);
    test3 = new ContentTools.Style('Test 3', 'test-3', ['h1', 'h2']);
    ContentTools.StylePalette.add(test1);
    ContentTools.StylePalette.add(test2);
    ContentTools.StylePalette.add(test3);
    expect(ContentTools.StylePalette.styles('p')).toEqual([test1, test2]);
    expect(ContentTools.StylePalette.styles('h1')).toEqual([test2, test3]);
    return expect(ContentTools.StylePalette.styles('h2')).toEqual([test3]);
  });
});

describe('ContentTools.Style()', function() {
  return it('should create `ContentTools.Style` instance', function() {
    var style;
    style = new ContentTools.Style('Test', 'test', ['p']);
    return expect(style instanceof ContentTools.Style).toBe(true);
  });
});

describe('ContentTools.Style.applicableTo()', function() {
  return it('should return a list of tag names the style is applicable to', function() {
    var style, tagNames;
    tagNames = ['p', 'img', 'table'];
    style = new ContentTools.Style('Test', 'test', tagNames);
    return expect(style.applicableTo()).toBe(tagNames);
  });
});

describe('ContentTools.Style.cssClass()', function() {
  return it('should return the CSS class name for the style', function() {
    var cssClassName, style;
    cssClassName = 'test';
    style = new ContentTools.Style('Test', cssClassName, 'p');
    return expect(style.cssClass()).toBe(cssClassName);
  });
});

describe('ContentTools.Style.name()', function() {
  return it('should return the name of the style', function() {
    var name, style;
    name = 'Test';
    style = new ContentTools.Style(name, 'test', 'p');
    return expect(style.name()).toBe(name);
  });
});
