// Generated by CoffeeScript 1.10.0
describe('ContentTools.ToolShelf.stow()', function() {
  return it('should store a `ContentTools.Tool` instance against a name', function() {
    var tool;
    tool = ContentTools.Tool;
    ContentTools.ToolShelf.stow(tool, 'tool');
    return expect(ContentTools.ToolShelf.fetch('tool')).toEqual(tool);
  });
});

describe('ContentTools.ToolShelf.fetch()', function() {
  return it('should return a `ContentTools.Tool` instance by name', function() {
    var tool;
    tool = ContentTools.Tools.Bold;
    return expect(ContentTools.ToolShelf.fetch('bold')).toEqual(tool);
  });
});

describe('ContentTools.Tools.Bold.apply()', function() {
  it('should wrap the selected content in a bold tag if the bold tag is not applied to all of the selection', function() {
    var element, region, selection, tool;
    region = new ContentEdit.Region(document.createElement('div'));
    selection = new ContentSelect.Range(0, 4);
    tool = ContentTools.Tools.Bold;
    element = new ContentEdit.Text('p', {}, 'test');
    region.attach(element);
    tool.apply(element, selection, (function(_this) {
      return function() {};
    })(this));
    expect(element.content.html()).toBe('<b>test</b>');
    element = new ContentEdit.Text('p', {}, '<b>te</b>st');
    region.attach(element);
    tool.apply(element, selection, (function(_this) {
      return function() {};
    })(this));
    return expect(element.content.html()).toBe('<b>test</b>');
  });
  return it('should remove the bold tag from the selected content if the bold tag is applied to all of the selection', function() {
    var element, region, selection, tool;
    element = new ContentEdit.Text('p', {}, '<b>test</b>');
    region = new ContentEdit.Region(document.createElement('div'));
    region.attach(element);
    selection = new ContentSelect.Range(0, 4);
    tool = ContentTools.Tools.Bold;
    tool.apply(element, selection, (function(_this) {
      return function() {};
    })(this));
    return expect(element.content.html()).toBe('test');
  });
});

describe('ContentTools.Tools.Bold.canApply()', function() {
  return it('should return true if the element supports content and the selection is not collapsed', function() {
    var element, selection, tool;
    element = new ContentEdit.Text('p', {}, 'test');
    tool = ContentTools.Tools.Bold;
    selection = new ContentSelect.Range(0, 2);
    expect(tool.canApply(element, selection)).toBe(true);
    selection = new ContentSelect.Range(0, 0);
    expect(tool.canApply(element, selection)).toBe(false);
    element = new ContentEdit.Image();
    return expect(tool.canApply(element, selection)).toBe(false);
  });
});

describe('ContentTools.Tools.Bold.isApplied()', function() {
  return it('should return true if the selected content is wrapped in a bold tag', function() {
    var element, selection, tool;
    element = new ContentEdit.Text('p', {}, '<b>te</b>st');
    tool = ContentTools.Tools.Bold;
    selection = new ContentSelect.Range(0, 2);
    expect(tool.isApplied(element, selection)).toBe(true);
    selection = new ContentSelect.Range(0, 4);
    expect(tool.isApplied(element, selection)).toBe(false);
    selection = new ContentSelect.Range(2, 4);
    return expect(tool.isApplied(element, selection)).toBe(false);
  });
});

describe('ContentTools.Tools.Italic.apply()', function() {
  it('should wrap the selected content in a italic tag if the italic tag is not applied to all of the selection', function() {
    var element, region, selection, tool;
    region = new ContentEdit.Region(document.createElement('div'));
    selection = new ContentSelect.Range(0, 4);
    tool = ContentTools.Tools.Italic;
    element = new ContentEdit.Text('p', {}, 'test');
    region.attach(element);
    tool.apply(element, selection, (function(_this) {
      return function() {};
    })(this));
    expect(element.content.html()).toBe('<i>test</i>');
    element = new ContentEdit.Text('p', {}, '<i>te</i>st');
    region.attach(element);
    tool.apply(element, selection, (function(_this) {
      return function() {};
    })(this));
    return expect(element.content.html()).toBe('<i>test</i>');
  });
  return it('should remove the italic tag from the selected content if the italic tag is applied to all of the selection', function() {
    var element, region, selection, tool;
    element = new ContentEdit.Text('p', {}, '<i>test</i>');
    region = new ContentEdit.Region(document.createElement('div'));
    region.attach(element);
    selection = new ContentSelect.Range(0, 4);
    tool = ContentTools.Tools.Italic;
    tool.apply(element, selection, (function(_this) {
      return function() {};
    })(this));
    return expect(element.content.html()).toBe('test');
  });
});

describe('ContentTools.Tools.Italic.canApply()', function() {
  return it('should return true if the element supports content and the selection is not collapsed', function() {
    var element, selection, tool;
    element = new ContentEdit.Text('p', {}, 'test');
    tool = ContentTools.Tools.Italic;
    selection = new ContentSelect.Range(0, 2);
    expect(tool.canApply(element, selection)).toBe(true);
    selection = new ContentSelect.Range(0, 0);
    expect(tool.canApply(element, selection)).toBe(false);
    element = new ContentEdit.Image();
    return expect(tool.canApply(element, selection)).toBe(false);
  });
});

describe('ContentTools.Tools.Italic.isApplied()', function() {
  return it('should return true if the selected content is wrapped in a italic tag', function() {
    var element, selection, tool;
    element = new ContentEdit.Text('p', {}, '<i>te</i>st');
    tool = ContentTools.Tools.Italic;
    selection = new ContentSelect.Range(0, 2);
    expect(tool.isApplied(element, selection)).toBe(true);
    selection = new ContentSelect.Range(0, 4);
    expect(tool.isApplied(element, selection)).toBe(false);
    selection = new ContentSelect.Range(2, 4);
    return expect(tool.isApplied(element, selection)).toBe(false);
  });
});

describe('ContentTools.Tools.Link.canApply()', function() {
  return it('should return true if the element supports content and the selection is not collapsed or if the element is an image', function() {
    var element, selection, tool;
    element = new ContentEdit.Text('p', {}, 'test');
    tool = ContentTools.Tools.Link;
    selection = new ContentSelect.Range(0, 2);
    expect(tool.canApply(element, selection)).toBe(true);
    selection = new ContentSelect.Range(0, 0);
    expect(tool.canApply(element, selection)).toBe(false);
    element = new ContentEdit.Image();
    return expect(tool.canApply(element, selection)).toBe(true);
  });
});

describe('ContentTools.Tools.Link.getAttr()', function() {
  return it('should return an attribute by name for the first anchor tag found in a selection or if the element is an image then for the anchor tag associated with image', function() {
    var element, selection, tool;
    element = new ContentEdit.Text('p', {}, '<a href="#test" target="_blank">te</a><a href="#test2">st</a>');
    tool = ContentTools.Tools.Link;
    selection = new ContentSelect.Range(0, 2);
    expect(tool.getAttr('href', element, selection)).toBe('#test');
    selection = new ContentSelect.Range(2, 4);
    expect(tool.getAttr('href', element, selection)).toBe('#test2');
    selection = new ContentSelect.Range(0, 2);
    expect(tool.getAttr('target', element, selection)).toBe('_blank');
    selection = new ContentSelect.Range(2, 4);
    expect(tool.getAttr('target', element, selection)).toBe(void 0);
    selection = new ContentSelect.Range(1, 4);
    return expect(tool.getAttr('href', element, selection)).toBe('#test');
  });
});

describe('ContentTools.Tools.Link.isApplied()', function() {
  return it('should return true if the selected content is wrapped in an anchor tag or is an image with an associated anchor tag', function() {
    var element, selection, tool;
    element = new ContentEdit.Text('p', {}, '<a href="#test">te</a>st');
    tool = ContentTools.Tools.Link;
    selection = new ContentSelect.Range(0, 2);
    expect(tool.isApplied(element, selection)).toBe(true);
    selection = new ContentSelect.Range(0, 4);
    expect(tool.isApplied(element, selection)).toBe(false);
    selection = new ContentSelect.Range(2, 4);
    return expect(tool.isApplied(element, selection)).toBe(false);
  });
});

describe('ContentTools.Tools.Heading.apply()', function() {
  return it('should change the tag name of a top level element supporting content to h1', function() {
    var element, region, selection, tool;
    region = new ContentEdit.Region(document.createElement('div'));
    selection = new ContentSelect.Range(0, 0);
    tool = ContentTools.Tools.Heading;
    element = new ContentEdit.Text('p', {}, 'test');
    region.attach(element);
    tool.apply(element, selection, (function(_this) {
      return function() {};
    })(this));
    return expect(element.tagName()).toBe('h1');
  });
});

describe('ContentTools.Tools.Heading.canApply()', function() {
  return it('should return true if the element is a top-level element that supports content', function() {
    var element, image, list, listItem, listItemText, region, selection, tool;
    region = new ContentEdit.Region(document.createElement('div'));
    selection = new ContentSelect.Range(0, 0);
    tool = ContentTools.Tools.Heading;
    element = new ContentEdit.Text('p', {}, 'test');
    region.attach(element);
    expect(tool.canApply(element, selection)).toBe(true);
    image = new ContentEdit.Image();
    region.attach(image);
    expect(tool.canApply(image, selection)).toBe(false);
    list = new ContentEdit.List('ul');
    listItem = new ContentEdit.ListItem();
    listItemText = new ContentEdit.ListItemText('test');
    listItem.attach(listItemText);
    list.attach(listItem);
    region.attach(list);
    return expect(tool.canApply(list, selection)).toBe(false);
  });
});

describe('ContentTools.Tools.Heading.isApplied()', function() {
  return it('should return false, tool does not support toggling', function() {
    var element, selection, tool;
    tool = ContentTools.Tools.Heading;
    element = new ContentEdit.Text('p', {}, 'test');
    selection = new ContentSelect.Range(0, 0);
    return expect(tool.isApplied(element, selection)).toBe(false);
  });
});

describe('ContentTools.Tools.Subheading.apply()', function() {
  return it('should change the tag name of a top level element supporting content to h2', function() {
    var element, region, selection, tool;
    region = new ContentEdit.Region(document.createElement('div'));
    selection = new ContentSelect.Range(0, 0);
    tool = ContentTools.Tools.Subheading;
    element = new ContentEdit.Text('p', {}, 'test');
    region.attach(element);
    tool.apply(element, selection, (function(_this) {
      return function() {};
    })(this));
    return expect(element.tagName()).toBe('h2');
  });
});

describe('ContentTools.Tools.Subheading.canApply()', function() {
  return it('should return true if the element is a top-level element that supports content', function() {
    var element, image, list, listItem, listItemText, region, selection, tool;
    region = new ContentEdit.Region(document.createElement('div'));
    selection = new ContentSelect.Range(0, 0);
    tool = ContentTools.Tools.Subheading;
    element = new ContentEdit.Text('p', {}, 'test');
    region.attach(element);
    expect(tool.canApply(element, selection)).toBe(true);
    image = new ContentEdit.Image();
    region.attach(image);
    expect(tool.canApply(image, selection)).toBe(false);
    list = new ContentEdit.List('ul');
    listItem = new ContentEdit.ListItem();
    listItemText = new ContentEdit.ListItemText('test');
    listItem.attach(listItemText);
    list.attach(listItem);
    region.attach(list);
    return expect(tool.canApply(list, selection)).toBe(false);
  });
});

describe('ContentTools.Tools.Subheading.isApplied()', function() {
  return it('should return false, tool does not support toggling', function() {
    var element, selection, tool;
    tool = ContentTools.Tools.Subheading;
    element = new ContentEdit.Text('p', {}, 'test');
    selection = new ContentSelect.Range(0, 0);
    return expect(tool.isApplied(element, selection)).toBe(false);
  });
});
