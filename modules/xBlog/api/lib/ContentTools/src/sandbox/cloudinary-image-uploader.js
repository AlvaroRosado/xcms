// Generated by CoffeeScript 1.10.0
var CloudinaryImageUploader, _resizeTimeout;

CloudinaryImageUploader = (function() {
  CloudinaryImageUploader.CLOUD_NAME = '';

  CloudinaryImageUploader.DRAFT_DIMENSIONS = [600, 600];

  CloudinaryImageUploader.INSERT_DIMENSIONS = [400, 400];

  CloudinaryImageUploader.RETRIEVE_URL = 'http://res.cloudinary.com/#CLOUD_NAME#/image/upload';

  CloudinaryImageUploader.UPLOAD_PRESET = '';

  CloudinaryImageUploader.UPLOAD_URL = 'https://api.cloudinary.com/v1_1/#CLOUD_NAME#/image/upload';

  function CloudinaryImageUploader(dialog) {
    this._dialog = dialog;
    this._dialog.bind('imageUploader.cancelUpload', (function(_this) {
      return function() {
        return _this._onCancelUpload();
      };
    })(this));
    this._dialog.bind('imageUploader.clear', (function(_this) {
      return function() {
        return _this._onClear();
      };
    })(this));
    this._dialog.bind('imageUploader.fileReady', (function(_this) {
      return function(files) {
        return _this._onFileReady(files);
      };
    })(this));
    this._dialog.bind('imageUploader.rotateCCW', (function(_this) {
      return function() {
        return _this._onRotate(-90);
      };
    })(this));
    this._dialog.bind('imageUploader.rotateCW', (function(_this) {
      return function() {
        return _this._onRotate(90);
      };
    })(this));
    this._dialog.bind('imageUploader.save', (function(_this) {
      return function() {
        return _this._onSave();
      };
    })(this));
  }

  CloudinaryImageUploader.prototype._onCancelUpload = function() {
    if (this._xhr) {
      this._xhr.upload.removeEventListener('progress', this._xhrProgress);
      this._xhr.removeEventListener('readystatechange', this._xhrComplete);
      this._xhr.abort();
    }
    return this._dialog.state('empty');
  };

  CloudinaryImageUploader.prototype._onClear = function() {
    this._dialog.clear();
    return this._image = null;
  };

  CloudinaryImageUploader.prototype._onFileReady = function(file) {
    var formData;
    this._dialog.progress(0);
    this._dialog.state('uploading');
    formData = new FormData();
    formData.append('file', file);
    formData.append('upload_preset', this.constructor.UPLOAD_PRESET);
    this._xhr = new XMLHttpRequest();
    this._xhr.open('POST', this.constructor._getUploadURL(), true);
    this._xhrProgress = (function(_this) {
      return function(ev) {
        return _this._dialog.progress((ev.loaded / ev.total) * 100);
      };
    })(this);
    this._xhrComplete = (function(_this) {
      return function(ev) {
        var filename, readyState, status, text;
        readyState = ev.target.readyState;
        text = ev.target.responseText;
        status = ev.target.status;
        if (readyState !== 4) {
          return;
        }
        _this._xhr = null;
        if (parseInt(status) === 200) {
          _this._image = JSON.parse(text);
          _this._image.angle = 0;
          _this._image.width = parseInt(_this._image.width);
          _this._image.height = parseInt(_this._image.height);
          _this._image.maxWidth = _this._image.width;
          filename = _this.constructor.parseURL(_this._image.url)[0];
          _this._image.url = _this.constructor.buildURL(filename, [_this.constructor._getDraftTransform()]);
          return _this._dialog.populate(_this._image.url, [_this._image.width, _this._image.height]);
        } else {
          return new ContentTools.FlashUI('no');
        }
      };
    })(this);
    this._xhr.upload.addEventListener('progress', this._xhrProgress);
    this._xhr.addEventListener('readystatechange', this._xhrComplete);
    return this._xhr.send(formData);
  };

  CloudinaryImageUploader.prototype._onRotate = function(angle) {
    var filename, h, transforms, w;
    this._image.angle += angle;
    if (this._image.angle < 0) {
      this._image.angle += 360;
    } else if (this._image.angle > 270) {
      this._image.angle -= 360;
    }
    w = this._image.width;
    h = this._image.height;
    this._image.width = h;
    this._image.height = w;
    this._image.maxWidth = this._image.width;
    transforms = [this.constructor._getDraftTransform()];
    if (this._image.angle > 0) {
      transforms.unshift({
        a: this._image.angle
      });
    }
    filename = this.constructor.parseURL(this._image.url)[0];
    this._image.url = this.constructor.buildURL(filename, transforms);
    return this._dialog.populate(this._image.url, [this._image.width, this._image.height]);
  };

  CloudinaryImageUploader.prototype._onSave = function() {
    var attrs, cropRegion, cropTransform, filename, heightScale, ratio, transforms, widthScale;
    transforms = [];
    if (this._image.angle !== 0) {
      transforms.push({
        a: this._image.angle
      });
    }
    cropRegion = this._dialog.cropRegion();
    if (!(cropRegion.toString() === [0, 0, 1, 1].toString())) {
      cropTransform = {
        c: 'crop',
        x: parseInt(this._image.width * cropRegion[1]),
        y: parseInt(this._image.height * cropRegion[0]),
        w: parseInt(this._image.width * (cropRegion[3] - cropRegion[1])),
        h: parseInt(this._image.height * (cropRegion[2] - cropRegion[0]))
      };
      this._image.width = cropTransform.w;
      this._image.height = cropTransform.h;
      this._image.maxWidth = this._image.width;
      transforms.push(cropTransform);
    }
    if (this._image.width > this.constructor.INSERT_DIMENSIONS[0] || this._image.height > this.constructor.INSERT_DIMENSIONS[1]) {
      transforms.push({
        c: 'fit',
        w: this.constructor.INSERT_DIMENSIONS[0],
        h: this.constructor.INSERT_DIMENSIONS[1]
      });
      widthScale = this.constructor.INSERT_DIMENSIONS[0] / this._image.width;
      heightScale = this.constructor.INSERT_DIMENSIONS[1] / this._image.height;
      ratio = Math.min(widthScale, heightScale);
      this._image.width = ratio * this._image.width;
      this._image.height = ratio * this._image.height;
    }
    filename = this.constructor.parseURL(this._image.url)[0];
    this._image.url = this.constructor.buildURL(filename, transforms);
    attrs = {
      'alt': '',
      'data-ce-max-width': this._image.maxWidth
    };
    return this._dialog.save(this._image.url, [this._image.width, this._image.height], attrs);
  };

  CloudinaryImageUploader.createImageUploader = function(dialog) {
    return new this(dialog);
  };

  CloudinaryImageUploader._getDraftTransform = function() {
    return {
      w: this.DRAFT_DIMENSIONS[0],
      h: this.DRAFT_DIMENSIONS[1],
      c: 'fit'
    };
  };

  CloudinaryImageUploader._getRetrieveURL = function() {
    return this.RETRIEVE_URL.replace('#CLOUD_NAME#', this.CLOUD_NAME);
  };

  CloudinaryImageUploader._getUploadURL = function() {
    return this.UPLOAD_URL.replace('#CLOUD_NAME#', this.CLOUD_NAME);
  };

  CloudinaryImageUploader.buildURL = function(filename, transforms) {
    var i, len, name, paramStrs, parts, transform, transformStrs, value;
    transformStrs = [];
    for (i = 0, len = transforms.length; i < len; i++) {
      transform = transforms[i];
      paramStrs = [];
      for (name in transform) {
        value = transform[name];
        paramStrs.push(name + "_" + value);
      }
      transformStrs.push(paramStrs.join(','));
    }
    parts = [this._getRetrieveURL()];
    if (transformStrs.length > 0) {
      parts.push(transformStrs.join('/'));
    }
    parts.push(filename);
    return parts.join('/');
  };

  CloudinaryImageUploader.parseURL = function(url) {
    var filename, i, j, len, len1, name, pair, part, parts, ref, ref1, transform, transforms, value;
    url = url.replace(new RegExp('^' + this._getRetrieveURL()), '');
    parts = url.split('/');
    parts.shift();
    filename = parts.pop();
    if (parts.length && parts[parts.length - 1].match(/v\d+/)) {
      parts.pop();
    }
    transforms = [];
    for (i = 0, len = parts.length; i < len; i++) {
      part = parts[i];
      transform = {};
      ref = part.split(',');
      for (j = 0, len1 = ref.length; j < len1; j++) {
        pair = ref[j];
        ref1 = pair.split('_'), name = ref1[0], value = ref1[1];
        transform[name] = value;
      }
      transforms.push(transform);
    }
    return [filename, transforms];
  };

  return CloudinaryImageUploader;

})();

window.CloudinaryImageUploader = CloudinaryImageUploader;

_resizeTimeout = null;

ContentEdit.Root.get().bind('taint', function(element) {
  var resizeURL;
  if (element.type() !== 'Image') {
    return;
  }
  if (_resizeTimeout) {
    clearTimeout(_resizeTimeout);
  }
  resizeURL = function() {
    var cls, filename, newSize, ref, transforms;
    cls = CloudinaryImageUploader;
    ref = cls.parseURL(element.attr('src')), filename = ref[0], transforms = ref[1];
    if (filename === void 0) {
      return;
    }
    newSize = element.size();
    if (transforms.length > 0 && transforms[transforms.length - 1]['c'] === 'fill') {
      transforms.pop();
    }
    transforms.push({
      w: newSize[0],
      h: newSize[1],
      c: 'fill'
    });
    return element.attr('src', cls.buildURL(filename, transforms));
  };
  return _resizeTimeout = setTimeout(resizeURL, 500);
});
