// Generated by CoffeeScript 1.10.0
var extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

ContentTools.IgnitionUI = (function(superClass) {
  extend(IgnitionUI, superClass);

  function IgnitionUI() {
    IgnitionUI.__super__.constructor.call(this);
    this._busy = false;
  }

  IgnitionUI.prototype.busy = function(busy) {
    if (busy === void 0) {
      return this._busy;
    }
    if (this._busy === busy) {
      return;
    }
    this._busy = busy;
    if (busy) {
      return this.addCSSClass('ct-ignition--busy');
    } else {
      return this.removeCSSClass('ct-ignition--busy');
    }
  };

  IgnitionUI.prototype.changeState = function(state) {

    /*if state is 'editing'
        @addCSSClass('ct-ignition--editing')
        @removeCSSClass('ct-ignition--ready')
    
    else if state is 'ready'
        @removeCSSClass('ct-ignition--editing')
        @addCSSClass('ct-ignition--ready')
     */
  };

  IgnitionUI.prototype.mount = function() {
    var textTitle, title;
    IgnitionUI.__super__.mount.call(this);
    this._domElement = this.constructor.createDiv(['ct-widget', 'ct-ignition', 'ct-ignition--editing']);
    this.parent().domElement().appendChild(this._domElement);
    title = document.createElement('h2');
    textTitle = document.createTextNode("Editor de posts");
    title.appendChild(textTitle);
    this._domElement.appendChild(title);

    /*@_domEdit = @constructor.createDiv([
        'ct-ignition__button',
        'ct-ignition__button--edit'
        ])
    @_domElement.appendChild(@_domEdit)
     */
    this._domSave = this.constructor.createDiv(['ct-ignition__button', 'ct-ignition__button--edit']);
    this._domElement.appendChild(this._domSave);
    this._domPublish = this.constructor.createDiv(['ct-ignition__button', 'ct-ignition__button--confirm']);
    this._domElement.appendChild(this._domPublish);
    this._domBusy = this.constructor.createDiv(['ct-ignition__button', 'ct-ignition__button--busy']);
    this._domElement.appendChild(this._domBusy);
    return this._addDOMEventListeners();
  };

  IgnitionUI.prototype.unmount = function() {
    IgnitionUI.__super__.unmount.call(this);
    this._domEdit = null;
    this._domConfirm = null;
    return this._domCancel = null;
  };

  IgnitionUI.prototype._addDOMEventListeners = function() {

    /*@_domEdit.addEventListener 'click', (ev) =>
        ev.preventDefault()
    
         * Change the state of the switch
        @addCSSClass('ct-ignition--editing')
        @removeCSSClass('ct-ignition--ready')
    
         * Trigger the start event
        @trigger('start')
     */
    this._domSave.addEventListener('click', (function(_this) {
      return function(ev) {
        ev.preventDefault();
        return _this.trigger('save', true);
      };
    })(this));
    return this._domPublish.addEventListener('click', (function(_this) {
      return function(ev) {
        var app, dialog, modal;
        ev.preventDefault();
        app = ContentTools.EditorApp.get();
        modal = new ContentTools.ModalUI();
        dialog = new ContentTools.ConfirmPublishDialog();
        dialog.bind('cancel', function() {
          dialog.unbind('cancel');
          modal.hide();
          return dialog.hide();
        });
        dialog.bind('ok', function() {
          dialog.unbind('ok');
          modal.hide();
          dialog.hide();
          return _this.trigger('publish', true);
        });
        app.attach(modal);
        app.attach(dialog);
        modal.show();
        return dialog.show();
      };
    })(this));
  };

  return IgnitionUI;

})(ContentTools.WidgetUI);
