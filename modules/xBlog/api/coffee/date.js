// Generated by CoffeeScript 1.10.0
var extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

ContentTools.Tools.Date = (function(superClass) {
  extend(Date, superClass);

  function Date() {
    return Date.__super__.constructor.apply(this, arguments);
  }

  ContentTools.ToolShelf.stow(Date, 'date');

  Date.label = 'Date';

  Date.icon = 'date';

  Date.tagName = 'time';

  Date.getAttr = function(attrName, element, selection) {
    var c, from, i, j, len, len1, ref, ref1, ref2, selectedContent, tag, to;
    ref = selection.get(), from = ref[0], to = ref[1];
    selectedContent = element.content.slice(from, to);
    ref1 = selectedContent.characters;
    for (i = 0, len = ref1.length; i < len; i++) {
      c = ref1[i];
      if (!c.hasTags('time')) {
        continue;
      }
      ref2 = c.tags();
      for (j = 0, len1 = ref2.length; j < len1; j++) {
        tag = ref2[j];
        if (tag.name() === 'time') {
          return tag.attr(attrName);
        }
      }
    }
    return '';
  };

  Date.canApply = function(element, selection) {
    return element.type() !== 'Image' && (selection != null) && (selection.isCollapsed() || this.isApplied(element, selection));
  };

  Date.isApplied = function(element, selection) {
    return Date.__super__.constructor.isApplied.call(this, element, selection);
  };

  Date.apply = function(element, selection, callback) {
    var allowScrolling, app, applied, dialog, domElement, from, measureSpan, modal, rect, ref, selectTag, to, transparent;
    applied = false;
    element.storeState();
    selectTag = new HTMLString.Tag('span', {
      'class': 'ct--puesdo-select'
    });
    ref = selection.get(), from = ref[0], to = ref[1];
    if (selection.isCollapsed()) {
      element.content = element.content.insert(from, '&nbsp;');
      element.content = element.content.format(from, to + 1, selectTag);
    } else {
      element.content = element.content.format(from, to, selectTag);
    }
    element.updateInnerHTML();
    domElement = element.domElement();
    measureSpan = domElement.getElementsByClassName('ct--puesdo-select');
    rect = measureSpan[0].getBoundingClientRect();
    if (selection.isCollapsed()) {
      element.content = element.content.unformat(from, to + 1, selectTag);
      element.content.characters.splice(to, 1);
    } else {
      element.content = element.content.unformat(from, to, selectTag);
    }
    element.updateInnerHTML();
    element.restoreState();
    app = ContentTools.EditorApp.get();
    modal = new ContentTools.ModalUI(transparent = true, allowScrolling = true);
    modal.bind('click', function() {
      this.unmount();
      dialog.hide();
      return callback(applied);
    });
    dialog = new ContentTools.DateDialog(this.getAttr('datetime', element, selection));
    dialog.position([rect.left + (rect.width / 2) + window.scrollX, rect.top + (rect.height / 2) + window.scrollY]);
    dialog.bind('save', function(dateAttr) {
      var localDate, time;
      dialog.unbind('save');
      applied = true;
      element.content = element.content.unformat(from, to, 'time');
      if (!selection.isCollapsed()) {
        element.content.characters.splice(from, to - from);
      }
      if (dateAttr.datetime) {
        time = new HTMLString.Tag('time', dateAttr);
        localDate = moment(dateAttr.datetime).format('LL');
        element.content = element.content.insert(from, localDate);
        element.content = element.content.format(from, from + localDate.length, time);
        element.content.optimize();
      }
      element.updateInnerHTML();
      element.taint();
      return modal.trigger('click');
    });
    app.attach(modal);
    app.attach(dialog);
    modal.show();
    return dialog.show();
  };

  return Date;

})(ContentTools.Tools.Bold);

ContentTools.DEFAULT_TOOLS.push(["imagePicker"]);

ContentTools.DateDialog = (function(superClass) {
  var NEW_WINDOW_TARGET;

  extend(DateDialog, superClass);

  NEW_WINDOW_TARGET = '_blank';

  function DateDialog(datetime) {
    if (datetime == null) {
      datetime = '';
    }
    DateDialog.__super__.constructor.call(this);
    moment.locale('es');
    this._datetime = datetime;
  }

  DateDialog.prototype.mount = function() {
    DateDialog.__super__.mount.call(this);
    this._domElement.classList.add('ct-anchored-dialog__date');
    this._domInput = this.constructor.createDiv(['ct-anchored-dialog__calendar']);
    this._domInput.setAttribute('name', 'datetime');
    this._domElement.appendChild(this._domInput);
    return this._addDOMEventListeners();
  };

  DateDialog.prototype.save = function(date) {
    var dateAttr;
    if (!this.isMounted) {
      return this.trigger('save', '');
    }
    dateAttr = {};
    dateAttr.datetime = date;
    return this.trigger('save', dateAttr);
  };

  DateDialog.prototype.show = function() {
    DateDialog.__super__.show.call(this);
    return this._domInput.focus();
  };

  DateDialog.prototype.unmount = function() {
    if (this.isMounted()) {
      this._domInput.blur();
    }
    DateDialog.__super__.unmount.call(this);
    this._domButton = null;
    return this._domInput = null;
  };

  DateDialog.prototype._addDOMEventListeners = function() {
    return rome(this._domInput, {
      time: false,
      initialValue: this._datetime
    }).on('data', (function(_this) {
      return function(value) {
        return _this.save(value);
      };
    })(this));
  };

  return DateDialog;

})(ContentTools.AnchoredDialogUI);
